import json
from django.contrib import messages
from django.shortcuts import redirect, render, HttpResponse
from .decorator import custom_login_required
from .models import *
from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist
import requests
from django.conf import settings
from .forms import *


BASEURL = 'http://127.0.0.1:9000/'
# BASEURL = settings.BASEURL
ENDPOINT = 'micro-service/'

def get_service_plan(service_plan_id):
    try:
        # Attempt to retrieve the service plan object by description
        ms_table = MS_ServicePlan.objects.get(description=service_plan_id)
        return ms_table.ms_id
    except ObjectDoesNotExist:
        return None
    except MultipleObjectsReturned:
        raise ValueError("Multiple service plans found for description: {}".format(service_plan_id))
    except Exception as error:
        return None
    
def call_post_method_without_token(URL,data):
    api_url = URL
    headers = { "Content-Type": "application/json"}
    response = requests.post(api_url,data=data,headers=headers)
    return response



def call_post_method_with_token_v2(URL, endpoint, data, access_token, files=None):
    api_url = URL + endpoint
    headers = {"Authorization": f'Bearer {access_token}'}
    
    if files:
        response = requests.post(api_url, data=data, files=files, headers=headers)
    else:
        headers["Content-Type"] = "application/json"
        response = requests.post(api_url, data=data, headers=headers)

    if response.status_code in [200, 201]:
        try:
            return {'status_code': 0, 'data': response.json()}
        except json.JSONDecodeError:
            return {'status_code': 1, 'data': 'Invalid JSON response'}
    else:
        try:
            return {'status_code': 1, 'data': response.json()}
        except json.JSONDecodeError:
            return {'status_code': 1, 'data': 'Something went wrong'}


def login(request):
    try:
        # Check if the request method is POST
        if request.method == "POST":
            username = request.POST.get('username')
            password = request.POST.get('password')
            payload = {        
                "username" : username,
                "password" : password
            }
            # Convert payload to JSON format
            json_payload = json.dumps(payload)
            print('json_payload',json_payload)
            ENDPOINT = 'api/token/'
            login_response = call_post_method_without_token(BASEURL+ENDPOINT,json_payload)
            print('login_response',login_response)
            if login_response.status_code == 200:
                login_tokes = login_response.json()
                request.session['user_token']=login_tokes['access']
                return redirect('/dashboard')
            else:
                login_tokes = login_response.json()
                login_error='Invalid Username and Password'
                context={"login_error":login_error}
                return render(request, 'login.html',context)
          
        return render(request, 'login.html')
    except Exception as error:
        return HttpResponse(f'<h1>{error}</h1>')
        
def dashboard(request):
    return render(request, 'dashboard.html')
def user_create(request):
    try:
        token = request.session['user_token']
        form=UserForm()
        MSID= get_service_plan('view user')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = UserForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create user')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['dob'] = cleaned_data['dob'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/user')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'user.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def user_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view user')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "user_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = UserForm(initial=master_view)    
        MSID= get_service_plan('view user')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "user_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'user_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def user_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view user')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "user_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = UserForm(initial=master_type_edit,)

        MSID= get_service_plan('view user')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update user')
            if MSID is None:
                print('MISID not found')
            form = UserForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['user_id'] = pk    
                cleaned_data['dob'] = cleaned_data['dob'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/user')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "user_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'user_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def user_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete user')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "user_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/user')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def assetcategory_create(request):
    # try:
        token = request.session['user_token']
        form=AssetCategoryForm()
        MSID= get_service_plan('view assetcategory')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        
        print("master_view",master_view)

        if request.method == "POST":
            form = AssetCategoryForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create assetcategory')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/assetcategory')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'assetcategory.html',context)
    # except Exception as error:
    #     return render(request, "error.html", {"error": error})    

def assetcategory_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view assetcategory')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "assetcategory_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = AssetCategoryForm(initial=master_view)    
        MSID= get_service_plan('view assetcategory')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "assetcategory_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'assetcategory_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def assetcategory_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view assetcategory')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "assetcategory_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = AssetCategoryForm(initial=master_type_edit,)

        MSID= get_service_plan('view assetcategory')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update assetcategory')
            if MSID is None:
                print('MISID not found')
            form = AssetCategoryForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['assetcategory_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/assetcategory')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "assetcategory_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'assetcategory_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def assetcategory_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete assetcategory')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "assetcategory_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/assetcategory')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def warehouse_create(request):
    try:
        token = request.session['user_token']
        form=WarehouseForm()
        MSID= get_service_plan('view warehouse')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = WarehouseForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create warehouse')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/warehouse')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'warehouse.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def warehouse_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view warehouse')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "warehouse_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = WarehouseForm(initial=master_view)    
        MSID= get_service_plan('view warehouse')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "warehouse_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'warehouse_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def warehouse_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view warehouse')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "warehouse_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = WarehouseForm(initial=master_type_edit,)

        MSID= get_service_plan('view warehouse')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update warehouse')
            if MSID is None:
                print('MISID not found')
            form = WarehouseForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['warehouse_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/warehouse')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "warehouse_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'warehouse_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def warehouse_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete warehouse')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "warehouse_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/warehouse')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def subcontractor_create(request):
    try:
        token = request.session['user_token']
        form=SubcontractorForm()
        MSID= get_service_plan('view subcontractor')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = SubcontractorForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create subcontractor')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date_prequalified'] = cleaned_data['date_prequalified'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/subcontractor')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'subcontractor.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def subcontractor_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view subcontractor')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "subcontractor_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = SubcontractorForm(initial=master_view)    
        MSID= get_service_plan('view subcontractor')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "subcontractor_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'subcontractor_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def subcontractor_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view subcontractor')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "subcontractor_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = SubcontractorForm(initial=master_type_edit,)

        MSID= get_service_plan('view subcontractor')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update subcontractor')
            if MSID is None:
                print('MISID not found')
            form = SubcontractorForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['subcontractor_id'] = pk    
                cleaned_data['date_prequalified'] = cleaned_data['date_prequalified'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/subcontractor')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "subcontractor_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'subcontractor_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def subcontractor_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete subcontractor')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "subcontractor_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/subcontractor')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def opportunityidentification_create(request):
    try:
        token = request.session['user_token']
        form=OpportunityIdentificationForm()
        MSID= get_service_plan('view opportunityidentification')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = OpportunityIdentificationForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create opportunityidentification')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['identification_date'] = cleaned_data['identification_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/opportunityidentification')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'opportunityidentification.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def opportunityidentification_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view opportunityidentification')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "opportunityidentification_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = OpportunityIdentificationForm(initial=master_view)    
        MSID= get_service_plan('view opportunityidentification')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "opportunityidentification_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'opportunityidentification_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def opportunityidentification_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view opportunityidentification')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "opportunityidentification_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = OpportunityIdentificationForm(initial=master_type_edit,)

        MSID= get_service_plan('view opportunityidentification')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update opportunityidentification')
            if MSID is None:
                print('MISID not found')
            form = OpportunityIdentificationForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['opportunityidentification_id'] = pk    
                cleaned_data['identification_date'] = cleaned_data['identification_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/opportunityidentification')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "opportunityidentification_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'opportunityidentification_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def opportunityidentification_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete opportunityidentification')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "opportunityidentification_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/opportunityidentification')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def bidproposal_create(request):
    try:
        token = request.session['user_token']
        form=BidProposalForm()
        MSID= get_service_plan('view bidproposal')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = BidProposalForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create bidproposal')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['submission_date'] = cleaned_data['submission_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/bidproposal')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'bidproposal.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bidproposal_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view bidproposal')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "bidproposal_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = BidProposalForm(initial=master_view)    
        MSID= get_service_plan('view bidproposal')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "bidproposal_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'bidproposal_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bidproposal_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view bidproposal')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "bidproposal_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = BidProposalForm(initial=master_type_edit,)

        MSID= get_service_plan('view bidproposal')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update bidproposal')
            if MSID is None:
                print('MISID not found')
            form = BidProposalForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['bidproposal_id'] = pk    
                cleaned_data['submission_date'] = cleaned_data['submission_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/bidproposal')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "bidproposal_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'bidproposal_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bidproposal_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete bidproposal')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "bidproposal_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/bidproposal')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def currency_create(request):
    try:
        token = request.session['user_token']
        form=CurrencyForm()
        MSID= get_service_plan('view currency')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = CurrencyForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create currency')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/currency')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'currency.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def currency_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view currency')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "currency_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = CurrencyForm(initial=master_view)    
        MSID= get_service_plan('view currency')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "currency_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'currency_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def currency_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view currency')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "currency_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = CurrencyForm(initial=master_type_edit,)

        MSID= get_service_plan('view currency')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update currency')
            if MSID is None:
                print('MISID not found')
            form = CurrencyForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['currency_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/currency')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "currency_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'currency_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def currency_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete currency')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "currency_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/currency')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def clientinteractiontype_create(request):
    try:
        token = request.session['user_token']
        form=ClientInteractionTypeForm()
        MSID= get_service_plan('view clientinteractiontype')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ClientInteractionTypeForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create clientinteractiontype')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clientinteractiontype')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'clientinteractiontype.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientinteractiontype_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view clientinteractiontype')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "clientinteractiontype_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ClientInteractionTypeForm(initial=master_view)    
        MSID= get_service_plan('view clientinteractiontype')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "clientinteractiontype_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'clientinteractiontype_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientinteractiontype_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view clientinteractiontype')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "clientinteractiontype_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ClientInteractionTypeForm(initial=master_type_edit,)

        MSID= get_service_plan('view clientinteractiontype')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update clientinteractiontype')
            if MSID is None:
                print('MISID not found')
            form = ClientInteractionTypeForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['clientinteractiontype_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clientinteractiontype')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "clientinteractiontype_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'clientinteractiontype_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientinteractiontype_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete clientinteractiontype')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "clientinteractiontype_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/clientinteractiontype')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def costcategory_create(request):
    try:
        token = request.session['user_token']
        form=CostCategoryForm()
        MSID= get_service_plan('view costcategory')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = CostCategoryForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create costcategory')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/costcategory')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'costcategory.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def costcategory_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view costcategory')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "costcategory_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = CostCategoryForm(initial=master_view)    
        MSID= get_service_plan('view costcategory')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "costcategory_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'costcategory_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def costcategory_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view costcategory')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "costcategory_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = CostCategoryForm(initial=master_type_edit,)

        MSID= get_service_plan('view costcategory')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update costcategory')
            if MSID is None:
                print('MISID not found')
            form = CostCategoryForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['costcategory_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/costcategory')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "costcategory_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'costcategory_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def costcategory_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete costcategory')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "costcategory_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/costcategory')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def equipmentcategory_create(request):
    try:
        token = request.session['user_token']
        form=EquipmentCategoryForm()
        MSID= get_service_plan('view equipmentcategory')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = EquipmentCategoryForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create equipmentcategory')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/equipmentcategory')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'equipmentcategory.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipmentcategory_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view equipmentcategory')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "equipmentcategory_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = EquipmentCategoryForm(initial=master_view)    
        MSID= get_service_plan('view equipmentcategory')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "equipmentcategory_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'equipmentcategory_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipmentcategory_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view equipmentcategory')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "equipmentcategory_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = EquipmentCategoryForm(initial=master_type_edit,)

        MSID= get_service_plan('view equipmentcategory')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update equipmentcategory')
            if MSID is None:
                print('MISID not found')
            form = EquipmentCategoryForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['equipmentcategory_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/equipmentcategory')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "equipmentcategory_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'equipmentcategory_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipmentcategory_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete equipmentcategory')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "equipmentcategory_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/equipmentcategory')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def account_create(request):
    try:
        token = request.session['user_token']
        form=AccountForm()
        MSID= get_service_plan('view account')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = AccountForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create account')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/account')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'account.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def account_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view account')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "account_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = AccountForm(initial=master_view)    
        MSID= get_service_plan('view account')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "account_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'account_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def account_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view account')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "account_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = AccountForm(initial=master_type_edit,)

        MSID= get_service_plan('view account')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update account')
            if MSID is None:
                print('MISID not found')
            form = AccountForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['account_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/account')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "account_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'account_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def account_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete account')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "account_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/account')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def itemcategory_create(request):
    try:
        token = request.session['user_token']
        form=ItemCategoryForm()
        MSID= get_service_plan('view itemcategory')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ItemCategoryForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create itemcategory')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/itemcategory')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'itemcategory.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def itemcategory_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view itemcategory')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "itemcategory_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ItemCategoryForm(initial=master_view)    
        MSID= get_service_plan('view itemcategory')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "itemcategory_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'itemcategory_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def itemcategory_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view itemcategory')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "itemcategory_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ItemCategoryForm(initial=master_type_edit,)

        MSID= get_service_plan('view itemcategory')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update itemcategory')
            if MSID is None:
                print('MISID not found')
            form = ItemCategoryForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['itemcategory_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/itemcategory')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "itemcategory_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'itemcategory_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def itemcategory_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete itemcategory')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "itemcategory_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/itemcategory')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def supplier_create(request):
    try:
        token = request.session['user_token']
        form=SupplierForm()
        MSID= get_service_plan('view supplier')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = SupplierForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create supplier')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/supplier')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'supplier.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def supplier_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view supplier')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "supplier_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = SupplierForm(initial=master_view)    
        MSID= get_service_plan('view supplier')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "supplier_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'supplier_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def supplier_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view supplier')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "supplier_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = SupplierForm(initial=master_type_edit,)

        MSID= get_service_plan('view supplier')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update supplier')
            if MSID is None:
                print('MISID not found')
            form = SupplierForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['supplier_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/supplier')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "supplier_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'supplier_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def supplier_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete supplier')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "supplier_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/supplier')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def leadsource_create(request):
    try:
        token = request.session['user_token']
        form=LeadSourceForm()
        MSID= get_service_plan('view leadsource')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = LeadSourceForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create leadsource')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/leadsource')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True,"leadsource":"active"
        }
        return render(request, 'leadsource.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def leadsource_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view leadsource')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "leadsource_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = LeadSourceForm(initial=master_view)    
        MSID= get_service_plan('view leadsource')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "leadsource_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'leadsource_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def leadsource_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view leadsource')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "leadsource_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = LeadSourceForm(initial=master_type_edit,)

        MSID= get_service_plan('view leadsource')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update leadsource')
            if MSID is None:
                print('MISID not found')
            form = LeadSourceForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['leadsource_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/leadsource')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "leadsource_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'leadsource_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def leadsource_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete leadsource')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "leadsource_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/leadsource')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def salesrepresentative_create(request):
    try:
        token = request.session['user_token']
        form=SalesRepresentativeForm()
        MSID= get_service_plan('view salesrepresentative')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = SalesRepresentativeForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create salesrepresentative')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/salesrepresentative')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'salesrepresentative.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def salesrepresentative_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view salesrepresentative')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "salesrepresentative_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = SalesRepresentativeForm(initial=master_view)    
        MSID= get_service_plan('view salesrepresentative')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "salesrepresentative_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'salesrepresentative_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def salesrepresentative_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view salesrepresentative')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "salesrepresentative_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = SalesRepresentativeForm(initial=master_type_edit,)

        MSID= get_service_plan('view salesrepresentative')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update salesrepresentative')
            if MSID is None:
                print('MISID not found')
            form = SalesRepresentativeForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['salesrepresentative_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/salesrepresentative')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "salesrepresentative_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'salesrepresentative_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def salesrepresentative_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete salesrepresentative')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "salesrepresentative_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/salesrepresentative')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def riskowner_create(request):
    try:
        token = request.session['user_token']
        form=RiskOwnerForm()
        MSID= get_service_plan('view riskowner')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = RiskOwnerForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create riskowner')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/riskowner')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'riskowner.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskowner_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view riskowner')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "riskowner_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = RiskOwnerForm(initial=master_view)    
        MSID= get_service_plan('view riskowner')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "riskowner_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'riskowner_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskowner_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view riskowner')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "riskowner_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = RiskOwnerForm(initial=master_type_edit,)

        MSID= get_service_plan('view riskowner')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update riskowner')
            if MSID is None:
                print('MISID not found')
            form = RiskOwnerForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['riskowner_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/riskowner')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "riskowner_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'riskowner_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskowner_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete riskowner')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "riskowner_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/riskowner')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def salesstage_create(request):
    try:
        token = request.session['user_token']
        form=SalesStageForm()
        MSID= get_service_plan('view salesstage')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = SalesStageForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create salesstage')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/salesstage')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'salesstage.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def salesstage_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view salesstage')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "salesstage_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = SalesStageForm(initial=master_view)    
        MSID= get_service_plan('view salesstage')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "salesstage_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'salesstage_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def salesstage_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view salesstage')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "salesstage_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = SalesStageForm(initial=master_type_edit,)

        MSID= get_service_plan('view salesstage')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update salesstage')
            if MSID is None:
                print('MISID not found')
            form = SalesStageForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['salesstage_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/salesstage')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "salesstage_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'salesstage_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def salesstage_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete salesstage')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "salesstage_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/salesstage')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def customer_create(request):
    try:
        token = request.session['user_token']
        form=CustomerForm()
        MSID= get_service_plan('view customer')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = CustomerForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create customer')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/customer')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'customer.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def customer_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view customer')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "customer_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = CustomerForm(initial=master_view)    
        MSID= get_service_plan('view customer')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "customer_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'customer_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def customer_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view customer')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "customer_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = CustomerForm(initial=master_type_edit,)

        MSID= get_service_plan('view customer')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update customer')
            if MSID is None:
                print('MISID not found')
            form = CustomerForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['customer_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/customer')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "customer_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'customer_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def customer_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete customer')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "customer_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/customer')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def riskcategory_create(request):
    try:
        token = request.session['user_token']
        form=RiskCategoryForm()
        MSID= get_service_plan('view riskcategory')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = RiskCategoryForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create riskcategory')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/riskcategory')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True,"riskcategory":"active"
        }
        return render(request, 'riskcategory.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskcategory_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view riskcategory')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "riskcategory_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = RiskCategoryForm(initial=master_view)    
        MSID= get_service_plan('view riskcategory')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "riskcategory_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'riskcategory_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskcategory_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view riskcategory')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "riskcategory_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = RiskCategoryForm(initial=master_type_edit,)

        MSID= get_service_plan('view riskcategory')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update riskcategory')
            if MSID is None:
                print('MISID not found')
            form = RiskCategoryForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['riskcategory_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/riskcategory')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "riskcategory_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'riskcategory_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskcategory_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete riskcategory')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "riskcategory_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/riskcategory')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def contractor_create(request):
    try:
        token = request.session['user_token']
        form=ContractorForm()
        MSID= get_service_plan('view contractor')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ContractorForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create contractor')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/contractor')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'contractor.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractor_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view contractor')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "contractor_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ContractorForm(initial=master_view)    
        MSID= get_service_plan('view contractor')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "contractor_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'contractor_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractor_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view contractor')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "contractor_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ContractorForm(initial=master_type_edit,)

        MSID= get_service_plan('view contractor')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update contractor')
            if MSID is None:
                print('MISID not found')
            form = ContractorForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['contractor_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/contractor')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "contractor_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'contractor_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractor_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete contractor')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "contractor_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/contractor')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def delaycause_create(request):
    try:
        token = request.session['user_token']
        form=DelayCauseForm()
        MSID= get_service_plan('view delaycause')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = DelayCauseForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create delaycause')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/delaycause')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'delaycause.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def delaycause_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view delaycause')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "delaycause_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = DelayCauseForm(initial=master_view)    
        MSID= get_service_plan('view delaycause')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "delaycause_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'delaycause_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def delaycause_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view delaycause')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "delaycause_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = DelayCauseForm(initial=master_type_edit,)

        MSID= get_service_plan('view delaycause')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update delaycause')
            if MSID is None:
                print('MISID not found')
            form = DelayCauseForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['delaycause_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/delaycause')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "delaycause_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'delaycause_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def delaycause_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete delaycause')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "delaycause_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/delaycause')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def individual_create(request):
    try:
        token = request.session['user_token']
        form=IndividualForm()
        MSID= get_service_plan('view individual')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = IndividualForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create individual')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/individual')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'individual.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def individual_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view individual')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "individual_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = IndividualForm(initial=master_view)    
        MSID= get_service_plan('view individual')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "individual_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'individual_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def individual_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view individual')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "individual_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = IndividualForm(initial=master_type_edit,)

        MSID= get_service_plan('view individual')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update individual')
            if MSID is None:
                print('MISID not found')
            form = IndividualForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['individual_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/individual')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "individual_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'individual_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def individual_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete individual')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "individual_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/individual')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def internaldepartment_create(request):
    try:
        token = request.session['user_token']
        form=InternalDepartmentForm()
        MSID= get_service_plan('view internaldepartment')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = InternalDepartmentForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create internaldepartment')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/internaldepartment')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'internaldepartment.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def internaldepartment_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view internaldepartment')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "internaldepartment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = InternalDepartmentForm(initial=master_view)    
        MSID= get_service_plan('view internaldepartment')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "internaldepartment_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'internaldepartment_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def internaldepartment_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view internaldepartment')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "internaldepartment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = InternalDepartmentForm(initial=master_type_edit,)

        MSID= get_service_plan('view internaldepartment')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update internaldepartment')
            if MSID is None:
                print('MISID not found')
            form = InternalDepartmentForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['internaldepartment_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/internaldepartment')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "internaldepartment_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'internaldepartment_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def internaldepartment_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete internaldepartment')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "internaldepartment_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/internaldepartment')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def project_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            manager_records = response['data']
        else:
            print('Data not found in response')
        form=ProjectForm(manager_choice=manager_records)
        MSID= get_service_plan('view project')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProjectForm(request.POST,manager_choice=manager_records)
            if form.is_valid():
                MSID= get_service_plan('create project')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['start_date'] = cleaned_data['start_date'].strftime('%Y-%m-%d')
                cleaned_data['projected_end_date'] = cleaned_data['projected_end_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/project')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True,"project":"active"
        }
        return render(request, 'project.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def project_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view project')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "project_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProjectForm(initial=master_view)    
        MSID= get_service_plan('view project')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "project_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'project_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def project_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            manager_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view project')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "project_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProjectForm(initial=master_type_edit,manager_choice=manager_records)

        MSID= get_service_plan('view project')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update project')
            if MSID is None:
                print('MISID not found')
            form = ProjectForm(request.POST,manager_choice=manager_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['project_id'] = pk    
                cleaned_data['start_date'] = cleaned_data['start_date'].strftime('%Y-%m-%d')
                cleaned_data['projected_end_date'] = cleaned_data['projected_end_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/project')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "project_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'project_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def project_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete project')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "project_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/project')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def resource_create(request):
    try:
        token = request.session['user_token']
        form=ResourceForm()
        MSID= get_service_plan('view resource')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ResourceForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create resource')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resource')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'resource.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resource_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view resource')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "resource_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ResourceForm(initial=master_view)    
        MSID= get_service_plan('view resource')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "resource_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'resource_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resource_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view resource')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "resource_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ResourceForm(initial=master_type_edit,)

        MSID= get_service_plan('view resource')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update resource')
            if MSID is None:
                print('MISID not found')
            form = ResourceForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['resource_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resource')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "resource_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'resource_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resource_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete resource')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "resource_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/resource')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def rfprfq_create(request):
    try:
        token = request.session['user_token']
        form=RFPRFQForm()
        MSID= get_service_plan('view rfprfq')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = RFPRFQForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create rfprfq')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['submission_deadline'] = cleaned_data['submission_deadline'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/rfprfq')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'rfprfq.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def rfprfq_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view rfprfq')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "rfprfq_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = RFPRFQForm(initial=master_view)    
        MSID= get_service_plan('view rfprfq')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "rfprfq_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'rfprfq_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def rfprfq_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view rfprfq')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "rfprfq_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = RFPRFQForm(initial=master_type_edit,)

        MSID= get_service_plan('view rfprfq')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update rfprfq')
            if MSID is None:
                print('MISID not found')
            form = RFPRFQForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['rfprfq_id'] = pk    
                cleaned_data['submission_deadline'] = cleaned_data['submission_deadline'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/rfprfq')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "rfprfq_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'rfprfq_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def rfprfq_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete rfprfq')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "rfprfq_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/rfprfq')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def role_create(request):
    try:
        token = request.session['user_token']
        form=RoleForm()
        MSID= get_service_plan('view role')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = RoleForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create role')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/role')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'role.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def role_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view role')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "role_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = RoleForm(initial=master_view)    
        MSID= get_service_plan('view role')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "role_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'role_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def role_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view role')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "role_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = RoleForm(initial=master_type_edit,)

        MSID= get_service_plan('view role')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update role')
            if MSID is None:
                print('MISID not found')
            form = RoleForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['role_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/role')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "role_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'role_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def role_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete role')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "role_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/role')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def scoringcriteria_create(request):
    try:
        token = request.session['user_token']
        form=ScoringCriteriaForm()
        MSID= get_service_plan('view scoringcriteria')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ScoringCriteriaForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create scoringcriteria')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/scoringcriteria')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'scoringcriteria.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def scoringcriteria_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view scoringcriteria')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "scoringcriteria_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ScoringCriteriaForm(initial=master_view)    
        MSID= get_service_plan('view scoringcriteria')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "scoringcriteria_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'scoringcriteria_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def scoringcriteria_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view scoringcriteria')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "scoringcriteria_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ScoringCriteriaForm(initial=master_type_edit,)

        MSID= get_service_plan('view scoringcriteria')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update scoringcriteria')
            if MSID is None:
                print('MISID not found')
            form = ScoringCriteriaForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['scoringcriteria_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/scoringcriteria')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "scoringcriteria_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'scoringcriteria_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def scoringcriteria_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete scoringcriteria')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "scoringcriteria_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/scoringcriteria')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def taskcategory_create(request):
    try:
        token = request.session['user_token']
        form=TaskCategoryForm()
        MSID= get_service_plan('view taskcategory')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = TaskCategoryForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create taskcategory')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/taskcategory')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'taskcategory.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskcategory_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view taskcategory')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "taskcategory_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TaskCategoryForm(initial=master_view)    
        MSID= get_service_plan('view taskcategory')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "taskcategory_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'taskcategory_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskcategory_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view taskcategory')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "taskcategory_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TaskCategoryForm(initial=master_type_edit,)

        MSID= get_service_plan('view taskcategory')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update taskcategory')
            if MSID is None:
                print('MISID not found')
            form = TaskCategoryForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['taskcategory_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/taskcategory')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "taskcategory_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'taskcategory_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskcategory_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete taskcategory')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "taskcategory_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/taskcategory')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def taskdurationestimation_create(request):
    try:
        token = request.session['user_token']
        form=TaskDurationEstimationForm()
        MSID= get_service_plan('view taskdurationestimation')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = TaskDurationEstimationForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create taskdurationestimation')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/taskdurationestimation')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'taskdurationestimation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskdurationestimation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view taskdurationestimation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "taskdurationestimation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TaskDurationEstimationForm(initial=master_view)    
        MSID= get_service_plan('view taskdurationestimation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "taskdurationestimation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'taskdurationestimation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskdurationestimation_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view taskdurationestimation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "taskdurationestimation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TaskDurationEstimationForm(initial=master_type_edit,)

        MSID= get_service_plan('view taskdurationestimation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update taskdurationestimation')
            if MSID is None:
                print('MISID not found')
            form = TaskDurationEstimationForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['taskdurationestimation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/taskdurationestimation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "taskdurationestimation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'taskdurationestimation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskdurationestimation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete taskdurationestimation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "taskdurationestimation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/taskdurationestimation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def taskpriority_create(request):
    try:
        token = request.session['user_token']
        form=TaskPriorityForm()
        MSID= get_service_plan('view taskpriority')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = TaskPriorityForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create taskpriority')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/taskpriority')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'taskpriority.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskpriority_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view taskpriority')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "taskpriority_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TaskPriorityForm(initial=master_view)    
        MSID= get_service_plan('view taskpriority')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "taskpriority_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'taskpriority_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskpriority_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view taskpriority')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "taskpriority_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TaskPriorityForm(initial=master_type_edit,)

        MSID= get_service_plan('view taskpriority')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update taskpriority')
            if MSID is None:
                print('MISID not found')
            form = TaskPriorityForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['taskpriority_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/taskpriority')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "taskpriority_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'taskpriority_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskpriority_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete taskpriority')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "taskpriority_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/taskpriority')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def team_create(request):
    try:
        token = request.session['user_token']
        form=TeamForm()
        MSID= get_service_plan('view team')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = TeamForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create team')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/team')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'team.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def team_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view team')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "team_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TeamForm(initial=master_view)    
        MSID= get_service_plan('view team')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "team_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'team_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def team_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view team')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "team_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TeamForm(initial=master_type_edit,)

        MSID= get_service_plan('view team')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update team')
            if MSID is None:
                print('MISID not found')
            form = TeamForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['team_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/team')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "team_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'team_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def team_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete team')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "team_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/team')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def vendor_create(request):
    try:
        token = request.session['user_token']
        form=VendorForm()
        MSID= get_service_plan('view vendor')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = VendorForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create vendor')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/vendor')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'vendor.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def vendor_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view vendor')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "vendor_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = VendorForm(initial=master_view)    
        MSID= get_service_plan('view vendor')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "vendor_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'vendor_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def vendor_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view vendor')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "vendor_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = VendorForm(initial=master_type_edit,)

        MSID= get_service_plan('view vendor')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update vendor')
            if MSID is None:
                print('MISID not found')
            form = VendorForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['vendor_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/vendor')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "vendor_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'vendor_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def vendor_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete vendor')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "vendor_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/vendor')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def asset_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view assetcategory')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            category_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view warehouse')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            location_records = response['data']
        else:
            print('Data not found in response')
        form=AssetForm(category_choice=category_records,location_choice=location_records)
        MSID= get_service_plan('view asset')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = AssetForm(request.POST,category_choice=category_records,location_choice=location_records)
            if form.is_valid():
                MSID= get_service_plan('create asset')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['purchase_date'] = cleaned_data['purchase_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/asset')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'asset.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def asset_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view asset')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "asset_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = AssetForm(initial=master_view)    
        MSID= get_service_plan('view asset')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "asset_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'asset_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def asset_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view assetcategory')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            category_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view warehouse')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            location_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view asset')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "asset_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = AssetForm(initial=master_type_edit,category_choice=category_records,location_choice=location_records)

        MSID= get_service_plan('view asset')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update asset')
            if MSID is None:
                print('MISID not found')
            form = AssetForm(request.POST,category_choice=category_records,location_choice=location_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['asset_id'] = pk    
                cleaned_data['purchase_date'] = cleaned_data['purchase_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/asset')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "asset_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'asset_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def asset_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete asset')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "asset_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/asset')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def expertise_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view subcontractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            subcontractor_records = response['data']
        else:
            print('Data not found in response')
        form=ExpertiseForm(subcontractor_choice=subcontractor_records)
        MSID= get_service_plan('view expertise')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ExpertiseForm(request.POST,subcontractor_choice=subcontractor_records)
            if form.is_valid():
                MSID= get_service_plan('create expertise')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/expertise')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'expertise.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def expertise_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view expertise')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "expertise_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ExpertiseForm(initial=master_view)    
        MSID= get_service_plan('view expertise')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "expertise_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'expertise_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def expertise_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view subcontractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            subcontractor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view expertise')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "expertise_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ExpertiseForm(initial=master_type_edit,subcontractor_choice=subcontractor_records)

        MSID= get_service_plan('view expertise')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update expertise')
            if MSID is None:
                print('MISID not found')
            form = ExpertiseForm(request.POST,subcontractor_choice=subcontractor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['expertise_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/expertise')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "expertise_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'expertise_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def expertise_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete expertise')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "expertise_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/expertise')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def bidnobiddecision_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view opportunityidentification')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            opportunity_records = response['data']
        else:
            print('Data not found in response')
        form=BidNoBidDecisionForm(opportunity_choice=opportunity_records)
        MSID= get_service_plan('view bidnobiddecision')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = BidNoBidDecisionForm(request.POST,opportunity_choice=opportunity_records)
            if form.is_valid():
                MSID= get_service_plan('create bidnobiddecision')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['decision_date'] = cleaned_data['decision_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/bidnobiddecision')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'bidnobiddecision.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bidnobiddecision_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view bidnobiddecision')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "bidnobiddecision_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = BidNoBidDecisionForm(initial=master_view)    
        MSID= get_service_plan('view bidnobiddecision')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "bidnobiddecision_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'bidnobiddecision_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bidnobiddecision_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view opportunityidentification')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            opportunity_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view bidnobiddecision')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "bidnobiddecision_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = BidNoBidDecisionForm(initial=master_type_edit,opportunity_choice=opportunity_records)

        MSID= get_service_plan('view bidnobiddecision')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update bidnobiddecision')
            if MSID is None:
                print('MISID not found')
            form = BidNoBidDecisionForm(request.POST,opportunity_choice=opportunity_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['bidnobiddecision_id'] = pk    
                cleaned_data['decision_date'] = cleaned_data['decision_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/bidnobiddecision')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "bidnobiddecision_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'bidnobiddecision_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bidnobiddecision_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete bidnobiddecision')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "bidnobiddecision_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/bidnobiddecision')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def proposalpreparation_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view opportunityidentification')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            opportunity_records = response['data']
        else:
            print('Data not found in response')
        form=ProposalPreparationForm(opportunity_choice=opportunity_records)
        MSID= get_service_plan('view proposalpreparation')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProposalPreparationForm(request.POST,opportunity_choice=opportunity_records)
            if form.is_valid():
                MSID= get_service_plan('create proposalpreparation')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/proposalpreparation')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'proposalpreparation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposalpreparation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view proposalpreparation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "proposalpreparation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProposalPreparationForm(initial=master_view)    
        MSID= get_service_plan('view proposalpreparation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "proposalpreparation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'proposalpreparation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposalpreparation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view opportunityidentification')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            opportunity_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view proposalpreparation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "proposalpreparation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProposalPreparationForm(initial=master_type_edit,opportunity_choice=opportunity_records)

        MSID= get_service_plan('view proposalpreparation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update proposalpreparation')
            if MSID is None:
                print('MISID not found')
            form = ProposalPreparationForm(request.POST,opportunity_choice=opportunity_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['proposalpreparation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/proposalpreparation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "proposalpreparation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'proposalpreparation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposalpreparation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete proposalpreparation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "proposalpreparation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/proposalpreparation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def bidsubmission_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view bidproposal')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            bid_proposal_records = response['data']
        else:
            print('Data not found in response')
        form=BidSubmissionForm(bid_proposal_choice=bid_proposal_records)
        MSID= get_service_plan('view bidsubmission')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = BidSubmissionForm(request.POST,bid_proposal_choice=bid_proposal_records)
            if form.is_valid():
                MSID= get_service_plan('create bidsubmission')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['submission_date'] = cleaned_data['submission_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/bidsubmission')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'bidsubmission.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bidsubmission_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view bidsubmission')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "bidsubmission_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = BidSubmissionForm(initial=master_view)    
        MSID= get_service_plan('view bidsubmission')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "bidsubmission_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'bidsubmission_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bidsubmission_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view bidproposal')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            bid_proposal_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view bidsubmission')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "bidsubmission_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = BidSubmissionForm(initial=master_type_edit,bid_proposal_choice=bid_proposal_records)

        MSID= get_service_plan('view bidsubmission')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update bidsubmission')
            if MSID is None:
                print('MISID not found')
            form = BidSubmissionForm(request.POST,bid_proposal_choice=bid_proposal_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['bidsubmission_id'] = pk    
                cleaned_data['submission_date'] = cleaned_data['submission_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/bidsubmission')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "bidsubmission_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'bidsubmission_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bidsubmission_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete bidsubmission')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "bidsubmission_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/bidsubmission')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def equipment_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view equipmentcategory')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     category_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view warehouse')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     location_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=EquipmentForm(category_choice=category_records,location_choice=location_records)
        # MSID= get_service_plan('view equipment')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = EquipmentForm()
        # if request.method == "POST":
        #     form = EquipmentForm(request.POST,category_choice=category_records,location_choice=location_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create equipment')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
        #         cleaned_data['purchase_date'] = cleaned_data['purchase_date'].strftime('%Y-%m-%d')
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/equipment')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'equipment.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipment_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view equipment')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "equipment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = EquipmentForm(initial=master_view)    
        MSID= get_service_plan('view equipment')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "equipment_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'equipment_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipment_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view equipmentcategory')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            category_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view warehouse')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            location_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view equipment')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "equipment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = EquipmentForm(initial=master_type_edit,category_choice=category_records,location_choice=location_records)

        MSID= get_service_plan('view equipment')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update equipment')
            if MSID is None:
                print('MISID not found')
            form = EquipmentForm(request.POST,category_choice=category_records,location_choice=location_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['equipment_id'] = pk    
                cleaned_data['purchase_date'] = cleaned_data['purchase_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/equipment')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "equipment_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'equipment_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipment_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete equipment')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "equipment_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/equipment')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def notification_create(request):
    try:
        token = request.session['user_token']
        form=NotificationForm()
        MSID= get_service_plan('view notification')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = NotificationForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create notification')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/notification')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'notification.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def notification_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view notification')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "notification_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = NotificationForm(initial=master_view)    
        MSID= get_service_plan('view notification')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "notification_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'notification_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def notification_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view notification')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "notification_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = NotificationForm(initial=master_type_edit,)

        MSID= get_service_plan('view notification')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update notification')
            if MSID is None:
                print('MISID not found')
            form = NotificationForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['notification_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/notification')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "notification_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'notification_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def notification_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete notification')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "notification_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/notification')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def item_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view itemcategory')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            category_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view supplier')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            supplier_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view warehouse')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            warehouse_records = response['data']
        else:
            print('Data not found in response')
        form=ItemForm(category_choice=category_records,supplier_choice=supplier_records,warehouse_choice=warehouse_records)
        MSID= get_service_plan('view item')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ItemForm(request.POST,category_choice=category_records,supplier_choice=supplier_records,warehouse_choice=warehouse_records)
            if form.is_valid():
                MSID= get_service_plan('create item')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/item')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'item.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def item_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view item')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "item_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ItemForm(initial=master_view)    
        MSID= get_service_plan('view item')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "item_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'item_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def item_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view itemcategory')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            category_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view supplier')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            supplier_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view warehouse')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            warehouse_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view item')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "item_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ItemForm(initial=master_type_edit,category_choice=category_records,supplier_choice=supplier_records,warehouse_choice=warehouse_records)

        MSID= get_service_plan('view item')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update item')
            if MSID is None:
                print('MISID not found')
            form = ItemForm(request.POST,category_choice=category_records,supplier_choice=supplier_records,warehouse_choice=warehouse_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['item_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/item')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "item_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'item_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def item_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete item')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "item_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/item')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def lead_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view leadsource')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            source_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view salesrepresentative')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            assigned_to_records = response['data']
        else:
            print('Data not found in response')
        form=LeadForm(source_choice=source_records,assigned_to_choice=assigned_to_records)
        MSID= get_service_plan('view lead')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = LeadForm(request.POST,source_choice=source_records,assigned_to_choice=assigned_to_records)
            if form.is_valid():
                MSID= get_service_plan('create lead')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/lead')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'lead.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def lead_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view lead')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "lead_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = LeadForm(initial=master_view)    
        MSID= get_service_plan('view lead')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "lead_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'lead_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def lead_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view leadsource')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            source_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view salesrepresentative')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            assigned_to_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view lead')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "lead_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = LeadForm(initial=master_type_edit,source_choice=source_records,assigned_to_choice=assigned_to_records)

        MSID= get_service_plan('view lead')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update lead')
            if MSID is None:
                print('MISID not found')
            form = LeadForm(request.POST,source_choice=source_records,assigned_to_choice=assigned_to_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['lead_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/lead')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "lead_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'lead_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def lead_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete lead')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "lead_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/lead')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def procurementneed_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view internaldepartment')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            department_records = response['data']
        else:
            print('Data not found in response')
        form=ProcurementNeedForm(department_choice=department_records)
        MSID= get_service_plan('view procurementneed')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProcurementNeedForm(request.POST,department_choice=department_records)
            if form.is_valid():
                MSID= get_service_plan('create procurementneed')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date_needed'] = cleaned_data['date_needed'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/procurementneed')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'procurementneed.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def procurementneed_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view procurementneed')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "procurementneed_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProcurementNeedForm(initial=master_view)    
        MSID= get_service_plan('view procurementneed')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "procurementneed_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'procurementneed_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def procurementneed_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view internaldepartment')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            department_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view procurementneed')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "procurementneed_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProcurementNeedForm(initial=master_type_edit,department_choice=department_records)

        MSID= get_service_plan('view procurementneed')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update procurementneed')
            if MSID is None:
                print('MISID not found')
            form = ProcurementNeedForm(request.POST,department_choice=department_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['procurementneed_id'] = pk    
                cleaned_data['date_needed'] = cleaned_data['date_needed'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/procurementneed')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "procurementneed_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'procurementneed_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def procurementneed_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete procurementneed')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "procurementneed_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/procurementneed')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def audit_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            conducted_by_records = response['data']
        else:
            print('Data not found in response')
        form=AuditForm(project_choice=project_records,conducted_by_choice=conducted_by_records)
        MSID= get_service_plan('view audit')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = AuditForm(request.POST,project_choice=project_records,conducted_by_choice=conducted_by_records)
            if form.is_valid():
                MSID= get_service_plan('create audit')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/audit')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'audit.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def audit_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view audit')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "audit_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = AuditForm(initial=master_view)    
        MSID= get_service_plan('view audit')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "audit_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'audit_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def audit_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            conducted_by_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view audit')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "audit_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = AuditForm(initial=master_type_edit,project_choice=project_records,conducted_by_choice=conducted_by_records)

        MSID= get_service_plan('view audit')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update audit')
            if MSID is None:
                print('MISID not found')
            form = AuditForm(request.POST,project_choice=project_records,conducted_by_choice=conducted_by_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['audit_id'] = pk    
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/audit')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "audit_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'audit_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def audit_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete audit')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "audit_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/audit')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def bid_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view subcontractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            subcontractor_records = response['data']
        else:
            print('Data not found in response')
        form=BidForm(project_choice=project_records,subcontractor_choice=subcontractor_records)
        MSID= get_service_plan('view bid')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = BidForm(request.POST,project_choice=project_records,subcontractor_choice=subcontractor_records)
            if form.is_valid():
                MSID= get_service_plan('create bid')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['bid_submission_date'] = cleaned_data['bid_submission_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/bid')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'bid.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bid_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view bid')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "bid_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = BidForm(initial=master_view)    
        MSID= get_service_plan('view bid')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "bid_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'bid_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bid_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view subcontractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            subcontractor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view bid')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "bid_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = BidForm(initial=master_type_edit,project_choice=project_records,subcontractor_choice=subcontractor_records)

        MSID= get_service_plan('view bid')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update bid')
            if MSID is None:
                print('MISID not found')
            form = BidForm(request.POST,project_choice=project_records,subcontractor_choice=subcontractor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['bid_id'] = pk    
                cleaned_data['bid_submission_date'] = cleaned_data['bid_submission_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/bid')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "bid_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'bid_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bid_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete bid')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "bid_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/bid')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def budget_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view currency')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            currency_records = response['data']
        else:
            print('Data not found in response')
        form=BudgetForm(project_choice=project_records,currency_choice=currency_records)
        MSID= get_service_plan('view budget')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = BudgetForm(request.POST,project_choice=project_records,currency_choice=currency_records)
            if form.is_valid():
                MSID= get_service_plan('create budget')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/budget')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'budget.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def budget_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view budget')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "budget_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = BudgetForm(initial=master_view)    
        MSID= get_service_plan('view budget')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "budget_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'budget_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def budget_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view currency')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            currency_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view budget')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "budget_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = BudgetForm(initial=master_type_edit,project_choice=project_records,currency_choice=currency_records)

        MSID= get_service_plan('view budget')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update budget')
            if MSID is None:
                print('MISID not found')
            form = BudgetForm(request.POST,project_choice=project_records,currency_choice=currency_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['budget_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/budget')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "budget_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'budget_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def budget_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete budget')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "budget_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/budget')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def budgetallocation_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=BudgetAllocationForm(project_choice=project_records)
        MSID= get_service_plan('view budgetallocation')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = BudgetAllocationForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create budgetallocation')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/budgetallocation')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'budgetallocation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def budgetallocation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view budgetallocation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "budgetallocation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = BudgetAllocationForm(initial=master_view)    
        MSID= get_service_plan('view budgetallocation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "budgetallocation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'budgetallocation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def budgetallocation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view budgetallocation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "budgetallocation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = BudgetAllocationForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view budgetallocation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update budgetallocation')
            if MSID is None:
                print('MISID not found')
            form = BudgetAllocationForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['budgetallocation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/budgetallocation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "budgetallocation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'budgetallocation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def budgetallocation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete budgetallocation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "budgetallocation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/budgetallocation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def clientfeedback_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=ClientFeedbackForm(project_choice=project_records)
        MSID= get_service_plan('view clientfeedback')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ClientFeedbackForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create clientfeedback')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['feedback_date'] = cleaned_data['feedback_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clientfeedback')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'clientfeedback.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientfeedback_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view clientfeedback')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "clientfeedback_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ClientFeedbackForm(initial=master_view)    
        MSID= get_service_plan('view clientfeedback')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "clientfeedback_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'clientfeedback_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientfeedback_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view clientfeedback')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "clientfeedback_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ClientFeedbackForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view clientfeedback')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update clientfeedback')
            if MSID is None:
                print('MISID not found')
            form = ClientFeedbackForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['clientfeedback_id'] = pk    
                cleaned_data['feedback_date'] = cleaned_data['feedback_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clientfeedback')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "clientfeedback_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'clientfeedback_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientfeedback_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete clientfeedback')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "clientfeedback_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/clientfeedback')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def clientfollowup_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=ClientFollowUpForm(project_choice=project_records)
        MSID= get_service_plan('view clientfollowup')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ClientFollowUpForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create clientfollowup')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['follow_up_date'] = cleaned_data['follow_up_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clientfollowup')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'clientfollowup.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientfollowup_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view clientfollowup')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "clientfollowup_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ClientFollowUpForm(initial=master_view)    
        MSID= get_service_plan('view clientfollowup')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "clientfollowup_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'clientfollowup_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientfollowup_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view clientfollowup')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "clientfollowup_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ClientFollowUpForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view clientfollowup')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update clientfollowup')
            if MSID is None:
                print('MISID not found')
            form = ClientFollowUpForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['clientfollowup_id'] = pk    
                cleaned_data['follow_up_date'] = cleaned_data['follow_up_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clientfollowup')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "clientfollowup_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'clientfollowup_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientfollowup_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete clientfollowup')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "clientfollowup_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/clientfollowup')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def clientsatisfactionsurvey_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=ClientSatisfactionSurveyForm(project_choice=project_records)
        MSID= get_service_plan('view clientsatisfactionsurvey')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ClientSatisfactionSurveyForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create clientsatisfactionsurvey')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['sent_date'] = cleaned_data['sent_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clientsatisfactionsurvey')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'clientsatisfactionsurvey.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientsatisfactionsurvey_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view clientsatisfactionsurvey')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "clientsatisfactionsurvey_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ClientSatisfactionSurveyForm(initial=master_view)    
        MSID= get_service_plan('view clientsatisfactionsurvey')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "clientsatisfactionsurvey_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'clientsatisfactionsurvey_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientsatisfactionsurvey_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view clientsatisfactionsurvey')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "clientsatisfactionsurvey_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ClientSatisfactionSurveyForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view clientsatisfactionsurvey')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update clientsatisfactionsurvey')
            if MSID is None:
                print('MISID not found')
            form = ClientSatisfactionSurveyForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['clientsatisfactionsurvey_id'] = pk    
                cleaned_data['sent_date'] = cleaned_data['sent_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clientsatisfactionsurvey')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "clientsatisfactionsurvey_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'clientsatisfactionsurvey_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientsatisfactionsurvey_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete clientsatisfactionsurvey')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "clientsatisfactionsurvey_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/clientsatisfactionsurvey')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def closeoutdocument_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=CloseoutDocumentForm(project_choice=project_records)
        MSID= get_service_plan('view closeoutdocument')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = CloseoutDocumentForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create closeoutdocument')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/closeoutdocument')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'closeoutdocument.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def closeoutdocument_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view closeoutdocument')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "closeoutdocument_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = CloseoutDocumentForm(initial=master_view)    
        MSID= get_service_plan('view closeoutdocument')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "closeoutdocument_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'closeoutdocument_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def closeoutdocument_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view closeoutdocument')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "closeoutdocument_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = CloseoutDocumentForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view closeoutdocument')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update closeoutdocument')
            if MSID is None:
                print('MISID not found')
            form = CloseoutDocumentForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['closeoutdocument_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/closeoutdocument')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "closeoutdocument_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'closeoutdocument_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def closeoutdocument_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete closeoutdocument')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "closeoutdocument_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/closeoutdocument')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def compliancemonitor_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=ComplianceMonitorForm(project_choice=project_records)
        MSID= get_service_plan('view compliancemonitor')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ComplianceMonitorForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create compliancemonitor')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/compliancemonitor')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'compliancemonitor.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def compliancemonitor_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view compliancemonitor')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "compliancemonitor_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ComplianceMonitorForm(initial=master_view)    
        MSID= get_service_plan('view compliancemonitor')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "compliancemonitor_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'compliancemonitor_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def compliancemonitor_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view compliancemonitor')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "compliancemonitor_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ComplianceMonitorForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view compliancemonitor')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update compliancemonitor')
            if MSID is None:
                print('MISID not found')
            form = ComplianceMonitorForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['compliancemonitor_id'] = pk    
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/compliancemonitor')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "compliancemonitor_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'compliancemonitor_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def compliancemonitor_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete compliancemonitor')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "compliancemonitor_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/compliancemonitor')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def contract_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view contractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contractor_records = response['data']
        else:
            print('Data not found in response')
        form=ContractForm(project_choice=project_records,contractor_choice=contractor_records)
        MSID= get_service_plan('view contract')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ContractForm(request.POST,project_choice=project_records,contractor_choice=contractor_records)
            if form.is_valid():
                MSID= get_service_plan('create contract')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['start_date'] = cleaned_data['start_date'].strftime('%Y-%m-%d')
                cleaned_data['end_date'] = cleaned_data['end_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/contract')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'contract.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contract_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view contract')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "contract_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ContractForm(initial=master_view)    
        MSID= get_service_plan('view contract')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "contract_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'contract_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contract_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view contractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contractor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view contract')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "contract_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ContractForm(initial=master_type_edit,project_choice=project_records,contractor_choice=contractor_records)

        MSID= get_service_plan('view contract')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update contract')
            if MSID is None:
                print('MISID not found')
            form = ContractForm(request.POST,project_choice=project_records,contractor_choice=contractor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['contract_id'] = pk    
                cleaned_data['start_date'] = cleaned_data['start_date'].strftime('%Y-%m-%d')
                cleaned_data['end_date'] = cleaned_data['end_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/contract')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "contract_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'contract_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contract_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete contract')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "contract_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/contract')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def contractawardexecution_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_manager_records = response['data']
        else:
            print('Data not found in response')
        form=ContractAwardExecutionForm(project_manager_choice=project_manager_records)
        MSID= get_service_plan('view contractawardexecution')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ContractAwardExecutionForm(request.POST,project_manager_choice=project_manager_records)
            if form.is_valid():
                MSID= get_service_plan('create contractawardexecution')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/contractawardexecution')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'contractawardexecution.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractawardexecution_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view contractawardexecution')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "contractawardexecution_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ContractAwardExecutionForm(initial=master_view)    
        MSID= get_service_plan('view contractawardexecution')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "contractawardexecution_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'contractawardexecution_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractawardexecution_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_manager_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view contractawardexecution')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "contractawardexecution_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ContractAwardExecutionForm(initial=master_type_edit,project_manager_choice=project_manager_records)

        MSID= get_service_plan('view contractawardexecution')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update contractawardexecution')
            if MSID is None:
                print('MISID not found')
            form = ContractAwardExecutionForm(request.POST,project_manager_choice=project_manager_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['contractawardexecution_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/contractawardexecution')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "contractawardexecution_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'contractawardexecution_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractawardexecution_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete contractawardexecution')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "contractawardexecution_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/contractawardexecution')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def costestimation_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view costcategory')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            category_records = response['data']
        else:
            print('Data not found in response')
        form=CostEstimationForm(project_choice=project_records,category_choice=category_records)
        MSID= get_service_plan('view costestimation')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = CostEstimationForm(request.POST,project_choice=project_records,category_choice=category_records)
            if form.is_valid():
                MSID= get_service_plan('create costestimation')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/costestimation')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'costestimation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def costestimation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view costestimation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "costestimation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = CostEstimationForm(initial=master_view)    
        MSID= get_service_plan('view costestimation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "costestimation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'costestimation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def costestimation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view costcategory')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            category_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view costestimation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "costestimation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = CostEstimationForm(initial=master_type_edit,project_choice=project_records,category_choice=category_records)

        MSID= get_service_plan('view costestimation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update costestimation')
            if MSID is None:
                print('MISID not found')
            form = CostEstimationForm(request.POST,project_choice=project_records,category_choice=category_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['costestimation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/costestimation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "costestimation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'costestimation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def costestimation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete costestimation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "costestimation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/costestimation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def finalclientsignoff_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            client_records = response['data']
        else:
            print('Data not found in response')
        form=FinalClientSignOffForm(project_choice=project_records,client_choice=client_records)
        MSID= get_service_plan('view finalclientsignoff')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = FinalClientSignOffForm(request.POST,project_choice=project_records,client_choice=client_records)
            if form.is_valid():
                MSID= get_service_plan('create finalclientsignoff')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['sign_off_date'] = cleaned_data['sign_off_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/finalclientsignoff')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'finalclientsignoff.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def finalclientsignoff_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view finalclientsignoff')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "finalclientsignoff_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = FinalClientSignOffForm(initial=master_view)    
        MSID= get_service_plan('view finalclientsignoff')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "finalclientsignoff_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'finalclientsignoff_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def finalclientsignoff_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            client_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view finalclientsignoff')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "finalclientsignoff_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = FinalClientSignOffForm(initial=master_type_edit,project_choice=project_records,client_choice=client_records)

        MSID= get_service_plan('view finalclientsignoff')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update finalclientsignoff')
            if MSID is None:
                print('MISID not found')
            form = FinalClientSignOffForm(request.POST,project_choice=project_records,client_choice=client_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['finalclientsignoff_id'] = pk    
                cleaned_data['sign_off_date'] = cleaned_data['sign_off_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/finalclientsignoff')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "finalclientsignoff_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'finalclientsignoff_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def finalclientsignoff_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete finalclientsignoff')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "finalclientsignoff_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/finalclientsignoff')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def finalinspection_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            inspector_records = response['data']
        else:
            print('Data not found in response')
        form=FinalInspectionForm(project_choice=project_records,inspector_choice=inspector_records)
        MSID= get_service_plan('view finalinspection')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = FinalInspectionForm(request.POST,project_choice=project_records,inspector_choice=inspector_records)
            if form.is_valid():
                MSID= get_service_plan('create finalinspection')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['inspection_date'] = cleaned_data['inspection_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/finalinspection')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'finalinspection.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def finalinspection_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view finalinspection')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "finalinspection_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = FinalInspectionForm(initial=master_view)    
        MSID= get_service_plan('view finalinspection')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "finalinspection_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'finalinspection_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def finalinspection_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            inspector_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view finalinspection')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "finalinspection_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = FinalInspectionForm(initial=master_type_edit,project_choice=project_records,inspector_choice=inspector_records)

        MSID= get_service_plan('view finalinspection')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update finalinspection')
            if MSID is None:
                print('MISID not found')
            form = FinalInspectionForm(request.POST,project_choice=project_records,inspector_choice=inspector_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['finalinspection_id'] = pk    
                cleaned_data['inspection_date'] = cleaned_data['inspection_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/finalinspection')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "finalinspection_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'finalinspection_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def finalinspection_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete finalinspection')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "finalinspection_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/finalinspection')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def finalreview_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            conducted_by_records = response['data']
        else:
            print('Data not found in response')
        form=FinalReviewForm(project_choice=project_records,conducted_by_choice=conducted_by_records)
        MSID= get_service_plan('view finalreview')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = FinalReviewForm(request.POST,project_choice=project_records,conducted_by_choice=conducted_by_records)
            if form.is_valid():
                MSID= get_service_plan('create finalreview')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/finalreview')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'finalreview.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def finalreview_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view finalreview')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "finalreview_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = FinalReviewForm(initial=master_view)    
        MSID= get_service_plan('view finalreview')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "finalreview_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'finalreview_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def finalreview_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            conducted_by_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view finalreview')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "finalreview_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = FinalReviewForm(initial=master_type_edit,project_choice=project_records,conducted_by_choice=conducted_by_records)

        MSID= get_service_plan('view finalreview')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update finalreview')
            if MSID is None:
                print('MISID not found')
            form = FinalReviewForm(request.POST,project_choice=project_records,conducted_by_choice=conducted_by_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['finalreview_id'] = pk    
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/finalreview')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "finalreview_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'finalreview_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def finalreview_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete finalreview')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "finalreview_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/finalreview')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def financialtransaction_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view account')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            account_records = response['data']
        else:
            print('Data not found in response')
        form=FinancialTransactionForm(project_choice=project_records,account_choice=account_records)
        MSID= get_service_plan('view financialtransaction')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = FinancialTransactionForm(request.POST,project_choice=project_records,account_choice=account_records)
            if form.is_valid():
                MSID= get_service_plan('create financialtransaction')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/financialtransaction')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'financialtransaction.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def financialtransaction_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view financialtransaction')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "financialtransaction_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = FinancialTransactionForm(initial=master_view)    
        MSID= get_service_plan('view financialtransaction')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "financialtransaction_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'financialtransaction_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def financialtransaction_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view account')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            account_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view financialtransaction')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "financialtransaction_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = FinancialTransactionForm(initial=master_type_edit,project_choice=project_records,account_choice=account_records)

        MSID= get_service_plan('view financialtransaction')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update financialtransaction')
            if MSID is None:
                print('MISID not found')
            form = FinancialTransactionForm(request.POST,project_choice=project_records,account_choice=account_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['financialtransaction_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/financialtransaction')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "financialtransaction_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'financialtransaction_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def financialtransaction_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete financialtransaction')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "financialtransaction_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/financialtransaction')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def incidentreport_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            reported_by_records = response['data']
        else:
            print('Data not found in response')
        form=IncidentReportForm(project_choice=project_records,reported_by_choice=reported_by_records)
        MSID= get_service_plan('view incidentreport')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = IncidentReportForm(request.POST,project_choice=project_records,reported_by_choice=reported_by_records)
            if form.is_valid():
                MSID= get_service_plan('create incidentreport')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/incidentreport')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'incidentreport.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def incidentreport_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view incidentreport')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "incidentreport_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = IncidentReportForm(initial=master_view)    
        MSID= get_service_plan('view incidentreport')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "incidentreport_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'incidentreport_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def incidentreport_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            reported_by_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view incidentreport')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "incidentreport_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = IncidentReportForm(initial=master_type_edit,project_choice=project_records,reported_by_choice=reported_by_records)

        MSID= get_service_plan('view incidentreport')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update incidentreport')
            if MSID is None:
                print('MISID not found')
            form = IncidentReportForm(request.POST,project_choice=project_records,reported_by_choice=reported_by_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['incidentreport_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/incidentreport')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "incidentreport_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'incidentreport_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def incidentreport_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete incidentreport')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "incidentreport_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/incidentreport')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def inspection_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            inspector_records = response['data']
        else:
            print('Data not found in response')
        form=InspectionForm(project_choice=project_records,inspector_choice=inspector_records)
        MSID= get_service_plan('view inspection')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = InspectionForm(request.POST,project_choice=project_records,inspector_choice=inspector_records)
            if form.is_valid():
                MSID= get_service_plan('create inspection')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/inspection')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'inspection.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def inspection_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view inspection')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "inspection_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = InspectionForm(initial=master_view)    
        MSID= get_service_plan('view inspection')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "inspection_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'inspection_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def inspection_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            inspector_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view inspection')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "inspection_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = InspectionForm(initial=master_type_edit,project_choice=project_records,inspector_choice=inspector_records)

        MSID= get_service_plan('view inspection')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update inspection')
            if MSID is None:
                print('MISID not found')
            form = InspectionForm(request.POST,project_choice=project_records,inspector_choice=inspector_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['inspection_id'] = pk    
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/inspection')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "inspection_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'inspection_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def inspection_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete inspection')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "inspection_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/inspection')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def legalrequirement_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=LegalRequirementForm(project_choice=project_records)
        MSID= get_service_plan('view legalrequirement')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = LegalRequirementForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create legalrequirement')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/legalrequirement')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'legalrequirement.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def legalrequirement_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view legalrequirement')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "legalrequirement_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = LegalRequirementForm(initial=master_view)    
        MSID= get_service_plan('view legalrequirement')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "legalrequirement_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'legalrequirement_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def legalrequirement_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view legalrequirement')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "legalrequirement_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = LegalRequirementForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view legalrequirement')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update legalrequirement')
            if MSID is None:
                print('MISID not found')
            form = LegalRequirementForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['legalrequirement_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/legalrequirement')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "legalrequirement_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'legalrequirement_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def legalrequirement_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete legalrequirement')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "legalrequirement_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/legalrequirement')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def message_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=MessageForm(project_choice=project_records)
        MSID= get_service_plan('view message')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = MessageForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create message')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/message')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'message.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def message_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view message')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "message_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = MessageForm(initial=master_view)    
        MSID= get_service_plan('view message')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "message_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'message_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def message_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view message')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "message_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = MessageForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view message')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update message')
            if MSID is None:
                print('MISID not found')
            form = MessageForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['message_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/message')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "message_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'message_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def message_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete message')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "message_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/message')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def milestone_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=MilestoneForm(project_choice=project_records)
        MSID= get_service_plan('view milestone')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = MilestoneForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create milestone')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['target_date'] = cleaned_data['target_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/milestone')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True,"milestone":"active"
        }
        return render(request, 'milestone.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def milestone_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view milestone')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "milestone_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = MilestoneForm(initial=master_view)    
        MSID= get_service_plan('view milestone')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "milestone_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'milestone_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def milestone_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view milestone')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "milestone_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = MilestoneForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view milestone')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update milestone')
            if MSID is None:
                print('MISID not found')
            form = MilestoneForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['milestone_id'] = pk    
                cleaned_data['target_date'] = cleaned_data['target_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/milestone')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "milestone_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'milestone_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def milestone_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete milestone')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "milestone_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/milestone')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def milestonebilling_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=MilestoneBillingForm(project_choice=project_records)
        MSID= get_service_plan('view milestonebilling')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = MilestoneBillingForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create milestonebilling')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['due_date'] = cleaned_data['due_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/milestonebilling')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'milestonebilling.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def milestonebilling_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view milestonebilling')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "milestonebilling_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = MilestoneBillingForm(initial=master_view)    
        MSID= get_service_plan('view milestonebilling')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "milestonebilling_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'milestonebilling_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def milestonebilling_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view milestonebilling')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "milestonebilling_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = MilestoneBillingForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view milestonebilling')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update milestonebilling')
            if MSID is None:
                print('MISID not found')
            form = MilestoneBillingForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['milestonebilling_id'] = pk    
                cleaned_data['due_date'] = cleaned_data['due_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/milestonebilling')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "milestonebilling_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'milestonebilling_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def milestonebilling_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete milestonebilling')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "milestonebilling_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/milestonebilling')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def payroll_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            worker_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=PayrollForm(worker_choice=worker_records,project_choice=project_records)
        MSID= get_service_plan('view payroll')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = PayrollForm(request.POST,worker_choice=worker_records,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create payroll')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['pay_period_start'] = cleaned_data['pay_period_start'].strftime('%Y-%m-%d')
                cleaned_data['pay_period_end'] = cleaned_data['pay_period_end'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/payroll')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'payroll.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def payroll_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view payroll')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "payroll_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = PayrollForm(initial=master_view)    
        MSID= get_service_plan('view payroll')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "payroll_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'payroll_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def payroll_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            worker_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view payroll')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "payroll_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = PayrollForm(initial=master_type_edit,worker_choice=worker_records,project_choice=project_records)

        MSID= get_service_plan('view payroll')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update payroll')
            if MSID is None:
                print('MISID not found')
            form = PayrollForm(request.POST,worker_choice=worker_records,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['payroll_id'] = pk    
                cleaned_data['pay_period_start'] = cleaned_data['pay_period_start'].strftime('%Y-%m-%d')
                cleaned_data['pay_period_end'] = cleaned_data['pay_period_end'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/payroll')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "payroll_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'payroll_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def payroll_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete payroll')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "payroll_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/payroll')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def postprojectreview_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=PostProjectReviewForm(project_choice=project_records)
        MSID= get_service_plan('view postprojectreview')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = PostProjectReviewForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create postprojectreview')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['review_date'] = cleaned_data['review_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/postprojectreview')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'postprojectreview.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def postprojectreview_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view postprojectreview')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "postprojectreview_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = PostProjectReviewForm(initial=master_view)    
        MSID= get_service_plan('view postprojectreview')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "postprojectreview_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'postprojectreview_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def postprojectreview_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view postprojectreview')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "postprojectreview_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = PostProjectReviewForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view postprojectreview')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update postprojectreview')
            if MSID is None:
                print('MISID not found')
            form = PostProjectReviewForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['postprojectreview_id'] = pk    
                cleaned_data['review_date'] = cleaned_data['review_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/postprojectreview')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "postprojectreview_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'postprojectreview_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def postprojectreview_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete postprojectreview')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "postprojectreview_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/postprojectreview')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def projectcloseout_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view subcontractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            subcontractor_records = response['data']
        else:
            print('Data not found in response')
        form=ProjectCloseoutForm(project_choice=project_records,subcontractor_choice=subcontractor_records)
        MSID= get_service_plan('view projectcloseout')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProjectCloseoutForm(request.POST,project_choice=project_records,subcontractor_choice=subcontractor_records)
            if form.is_valid():
                MSID= get_service_plan('create projectcloseout')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['final_inspection_date'] = cleaned_data['final_inspection_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectcloseout')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'projectcloseout.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectcloseout_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view projectcloseout')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "projectcloseout_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProjectCloseoutForm(initial=master_view)    
        MSID= get_service_plan('view projectcloseout')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "projectcloseout_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'projectcloseout_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectcloseout_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view subcontractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            subcontractor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view projectcloseout')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "projectcloseout_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProjectCloseoutForm(initial=master_type_edit,project_choice=project_records,subcontractor_choice=subcontractor_records)

        MSID= get_service_plan('view projectcloseout')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update projectcloseout')
            if MSID is None:
                print('MISID not found')
            form = ProjectCloseoutForm(request.POST,project_choice=project_records,subcontractor_choice=subcontractor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['projectcloseout_id'] = pk    
                cleaned_data['final_inspection_date'] = cleaned_data['final_inspection_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectcloseout')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "projectcloseout_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'projectcloseout_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectcloseout_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete projectcloseout')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "projectcloseout_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/projectcloseout')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def projectcommunication_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=ProjectCommunicationForm(project_choice=project_records)
        MSID= get_service_plan('view projectcommunication')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProjectCommunicationForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create projectcommunication')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectcommunication')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'projectcommunication.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectcommunication_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view projectcommunication')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "projectcommunication_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProjectCommunicationForm(initial=master_view)    
        MSID= get_service_plan('view projectcommunication')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "projectcommunication_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'projectcommunication_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectcommunication_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view projectcommunication')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "projectcommunication_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProjectCommunicationForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view projectcommunication')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update projectcommunication')
            if MSID is None:
                print('MISID not found')
            form = ProjectCommunicationForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['projectcommunication_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectcommunication')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "projectcommunication_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'projectcommunication_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectcommunication_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete projectcommunication')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "projectcommunication_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/projectcommunication')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def projectdocumentation_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=ProjectDocumentationForm(project_choice=project_records)
        MSID= get_service_plan('view projectdocumentation')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProjectDocumentationForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create projectdocumentation')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['issue_date'] = cleaned_data['issue_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectdocumentation')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'projectdocumentation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectdocumentation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view projectdocumentation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "projectdocumentation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProjectDocumentationForm(initial=master_view)    
        MSID= get_service_plan('view projectdocumentation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "projectdocumentation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'projectdocumentation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectdocumentation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view projectdocumentation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "projectdocumentation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProjectDocumentationForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view projectdocumentation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update projectdocumentation')
            if MSID is None:
                print('MISID not found')
            form = ProjectDocumentationForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['projectdocumentation_id'] = pk    
                cleaned_data['issue_date'] = cleaned_data['issue_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectdocumentation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "projectdocumentation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'projectdocumentation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectdocumentation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete projectdocumentation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "projectdocumentation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/projectdocumentation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def projectfinancialcloseout_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=ProjectFinancialCloseoutForm(project_choice=project_records)
        MSID= get_service_plan('view projectfinancialcloseout')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProjectFinancialCloseoutForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create projectfinancialcloseout')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['closeout_date'] = cleaned_data['closeout_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectfinancialcloseout')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'projectfinancialcloseout.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectfinancialcloseout_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view projectfinancialcloseout')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "projectfinancialcloseout_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProjectFinancialCloseoutForm(initial=master_view)    
        MSID= get_service_plan('view projectfinancialcloseout')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "projectfinancialcloseout_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'projectfinancialcloseout_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectfinancialcloseout_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view projectfinancialcloseout')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "projectfinancialcloseout_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProjectFinancialCloseoutForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view projectfinancialcloseout')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update projectfinancialcloseout')
            if MSID is None:
                print('MISID not found')
            form = ProjectFinancialCloseoutForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['projectfinancialcloseout_id'] = pk    
                cleaned_data['closeout_date'] = cleaned_data['closeout_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectfinancialcloseout')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "projectfinancialcloseout_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'projectfinancialcloseout_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectfinancialcloseout_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete projectfinancialcloseout')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "projectfinancialcloseout_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/projectfinancialcloseout')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def projectperformancereview_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=ProjectPerformanceReviewForm(project_choice=project_records)
        MSID= get_service_plan('view projectperformancereview')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProjectPerformanceReviewForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create projectperformancereview')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['review_date'] = cleaned_data['review_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectperformancereview')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'projectperformancereview.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectperformancereview_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view projectperformancereview')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "projectperformancereview_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProjectPerformanceReviewForm(initial=master_view)    
        MSID= get_service_plan('view projectperformancereview')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "projectperformancereview_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'projectperformancereview_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectperformancereview_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view projectperformancereview')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "projectperformancereview_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProjectPerformanceReviewForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view projectperformancereview')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update projectperformancereview')
            if MSID is None:
                print('MISID not found')
            form = ProjectPerformanceReviewForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['projectperformancereview_id'] = pk    
                cleaned_data['review_date'] = cleaned_data['review_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectperformancereview')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "projectperformancereview_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'projectperformancereview_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectperformancereview_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete projectperformancereview')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "projectperformancereview_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/projectperformancereview')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def projectschedule_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=ProjectScheduleForm(project_choice=project_records)
        MSID= get_service_plan('view projectschedule')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProjectScheduleForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create projectschedule')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['start_date'] = cleaned_data['start_date'].strftime('%Y-%m-%d')
                cleaned_data['end_date'] = cleaned_data['end_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectschedule')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'projectschedule.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectschedule_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view projectschedule')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "projectschedule_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProjectScheduleForm(initial=master_view)    
        MSID= get_service_plan('view projectschedule')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "projectschedule_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'projectschedule_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectschedule_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view projectschedule')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "projectschedule_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProjectScheduleForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view projectschedule')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update projectschedule')
            if MSID is None:
                print('MISID not found')
            form = ProjectScheduleForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['projectschedule_id'] = pk    
                cleaned_data['start_date'] = cleaned_data['start_date'].strftime('%Y-%m-%d')
                cleaned_data['end_date'] = cleaned_data['end_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectschedule')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "projectschedule_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'projectschedule_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectschedule_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete projectschedule')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "projectschedule_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/projectschedule')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def punchlistitem_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view contractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contractor_records = response['data']
        else:
            print('Data not found in response')
        form=PunchListItemForm(project_choice=project_records,contractor_choice=contractor_records)
        MSID= get_service_plan('view punchlistitem')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = PunchListItemForm(request.POST,project_choice=project_records,contractor_choice=contractor_records)
            if form.is_valid():
                MSID= get_service_plan('create punchlistitem')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['resolved_at'] = cleaned_data['resolved_at'].strftime('%Y-%m-%d')
                cleaned_data['fix_deadline'] = cleaned_data['fix_deadline'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/punchlistitem')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'punchlistitem.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def punchlistitem_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view punchlistitem')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "punchlistitem_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = PunchListItemForm(initial=master_view)    
        MSID= get_service_plan('view punchlistitem')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "punchlistitem_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'punchlistitem_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def punchlistitem_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view contractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contractor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view punchlistitem')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "punchlistitem_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = PunchListItemForm(initial=master_type_edit,project_choice=project_records,contractor_choice=contractor_records)

        MSID= get_service_plan('view punchlistitem')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update punchlistitem')
            if MSID is None:
                print('MISID not found')
            form = PunchListItemForm(request.POST,project_choice=project_records,contractor_choice=contractor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['punchlistitem_id'] = pk    
                cleaned_data['resolved_at'] = cleaned_data['resolved_at'].strftime('%Y-%m-%d')
                cleaned_data['fix_deadline'] = cleaned_data['fix_deadline'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/punchlistitem')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "punchlistitem_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'punchlistitem_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def punchlistitem_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete punchlistitem')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "punchlistitem_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/punchlistitem')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def qualitycontrolplan_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=QualityControlPlanForm(project_choice=project_records)
        MSID= get_service_plan('view qualitycontrolplan')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = QualityControlPlanForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create qualitycontrolplan')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/qualitycontrolplan')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'qualitycontrolplan.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def qualitycontrolplan_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view qualitycontrolplan')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "qualitycontrolplan_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = QualityControlPlanForm(initial=master_view)    
        MSID= get_service_plan('view qualitycontrolplan')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "qualitycontrolplan_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'qualitycontrolplan_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def qualitycontrolplan_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view qualitycontrolplan')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "qualitycontrolplan_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = QualityControlPlanForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view qualitycontrolplan')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update qualitycontrolplan')
            if MSID is None:
                print('MISID not found')
            form = QualityControlPlanForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['qualitycontrolplan_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/qualitycontrolplan')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "qualitycontrolplan_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'qualitycontrolplan_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def qualitycontrolplan_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete qualitycontrolplan')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "qualitycontrolplan_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/qualitycontrolplan')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def qualityinspector_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     user_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view project')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     project_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=QualityInspectorForm(user_choice=user_records,project_choice=project_records)
        # MSID= get_service_plan('view qualityinspector')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = QualityInspectorForm()
        # if request.method == "POST":
        #     form = QualityInspectorForm(request.POST,user_choice=user_records,project_choice=project_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create qualityinspector')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/qualityinspector')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'qualityinspector.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def qualityinspector_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view qualityinspector')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "qualityinspector_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = QualityInspectorForm(initial=master_view)    
        MSID= get_service_plan('view qualityinspector')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "qualityinspector_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'qualityinspector_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def qualityinspector_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            user_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view qualityinspector')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "qualityinspector_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = QualityInspectorForm(initial=master_type_edit,user_choice=user_records,project_choice=project_records)

        MSID= get_service_plan('view qualityinspector')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update qualityinspector')
            if MSID is None:
                print('MISID not found')
            form = QualityInspectorForm(request.POST,user_choice=user_records,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['qualityinspector_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/qualityinspector')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "qualityinspector_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'qualityinspector_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def qualityinspector_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete qualityinspector')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "qualityinspector_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/qualityinspector')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def resourceplanning_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=ResourcePlanningForm(project_choice=project_records)
        MSID= get_service_plan('view resourceplanning')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ResourcePlanningForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create resourceplanning')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourceplanning')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'resourceplanning.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceplanning_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view resourceplanning')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "resourceplanning_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ResourcePlanningForm(initial=master_view)    
        MSID= get_service_plan('view resourceplanning')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "resourceplanning_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'resourceplanning_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceplanning_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view resourceplanning')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "resourceplanning_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ResourcePlanningForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view resourceplanning')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update resourceplanning')
            if MSID is None:
                print('MISID not found')
            form = ResourcePlanningForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['resourceplanning_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourceplanning')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "resourceplanning_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'resourceplanning_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceplanning_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete resourceplanning')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "resourceplanning_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/resourceplanning')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def resourceutilizationanalysis_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=ResourceUtilizationAnalysisForm(project_choice=project_records)
        MSID= get_service_plan('view resourceutilizationanalysis')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ResourceUtilizationAnalysisForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create resourceutilizationanalysis')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['analysis_date'] = cleaned_data['analysis_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourceutilizationanalysis')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'resourceutilizationanalysis.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceutilizationanalysis_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view resourceutilizationanalysis')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "resourceutilizationanalysis_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ResourceUtilizationAnalysisForm(initial=master_view)    
        MSID= get_service_plan('view resourceutilizationanalysis')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "resourceutilizationanalysis_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'resourceutilizationanalysis_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceutilizationanalysis_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view resourceutilizationanalysis')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "resourceutilizationanalysis_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ResourceUtilizationAnalysisForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view resourceutilizationanalysis')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update resourceutilizationanalysis')
            if MSID is None:
                print('MISID not found')
            form = ResourceUtilizationAnalysisForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['resourceutilizationanalysis_id'] = pk    
                cleaned_data['analysis_date'] = cleaned_data['analysis_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourceutilizationanalysis')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "resourceutilizationanalysis_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'resourceutilizationanalysis_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceutilizationanalysis_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete resourceutilizationanalysis')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "resourceutilizationanalysis_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/resourceutilizationanalysis')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def revenue_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view customer')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            customer_records = response['data']
        else:
            print('Data not found in response')
        form=RevenueForm(project_choice=project_records,customer_choice=customer_records)
        MSID= get_service_plan('view revenue')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = RevenueForm(request.POST,project_choice=project_records,customer_choice=customer_records)
            if form.is_valid():
                MSID= get_service_plan('create revenue')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/revenue')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'revenue.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def revenue_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view revenue')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "revenue_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = RevenueForm(initial=master_view)    
        MSID= get_service_plan('view revenue')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "revenue_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'revenue_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def revenue_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view customer')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            customer_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view revenue')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "revenue_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = RevenueForm(initial=master_type_edit,project_choice=project_records,customer_choice=customer_records)

        MSID= get_service_plan('view revenue')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update revenue')
            if MSID is None:
                print('MISID not found')
            form = RevenueForm(request.POST,project_choice=project_records,customer_choice=customer_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['revenue_id'] = pk    
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/revenue')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "revenue_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'revenue_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def revenue_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete revenue')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "revenue_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/revenue')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def risk_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view riskcategory')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            risk_category_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view riskowner')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            owner_records = response['data']
        else:
            print('Data not found in response')
        form=RiskForm(project_choice=project_records,risk_category_choice=risk_category_records,owner_choice=owner_records)
        MSID= get_service_plan('view risk')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = RiskForm(request.POST,project_choice=project_records,risk_category_choice=risk_category_records,owner_choice=owner_records)
            if form.is_valid():
                MSID= get_service_plan('create risk')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date_identified'] = cleaned_data['date_identified'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/risk')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'risk.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def risk_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view risk')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "risk_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = RiskForm(initial=master_view)    
        MSID= get_service_plan('view risk')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "risk_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'risk_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def risk_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view riskcategory')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            risk_category_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view riskowner')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            owner_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view risk')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "risk_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = RiskForm(initial=master_type_edit,project_choice=project_records,risk_category_choice=risk_category_records,owner_choice=owner_records)

        MSID= get_service_plan('view risk')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update risk')
            if MSID is None:
                print('MISID not found')
            form = RiskForm(request.POST,project_choice=project_records,risk_category_choice=risk_category_records,owner_choice=owner_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['risk_id'] = pk    
                cleaned_data['date_identified'] = cleaned_data['date_identified'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/risk')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "risk_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'risk_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def risk_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete risk')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "risk_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/risk')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def safetyofficer_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     user_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view project')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     project_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=SafetyOfficerForm(user_choice=user_records,project_choice=project_records)
        # MSID= get_service_plan('view safetyofficer')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = SafetyOfficerForm()
        # if request.method == "POST":
        #     form = SafetyOfficerForm(request.POST,user_choice=user_records,project_choice=project_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create safetyofficer')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/safetyofficer')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'safetyofficer.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def safetyofficer_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view safetyofficer')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "safetyofficer_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = SafetyOfficerForm(initial=master_view)    
        MSID= get_service_plan('view safetyofficer')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "safetyofficer_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'safetyofficer_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def safetyofficer_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            user_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view safetyofficer')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "safetyofficer_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = SafetyOfficerForm(initial=master_type_edit,user_choice=user_records,project_choice=project_records)

        MSID= get_service_plan('view safetyofficer')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update safetyofficer')
            if MSID is None:
                print('MISID not found')
            form = SafetyOfficerForm(request.POST,user_choice=user_records,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['safetyofficer_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/safetyofficer')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "safetyofficer_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'safetyofficer_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def safetyofficer_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete safetyofficer')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "safetyofficer_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/safetyofficer')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def safetyplan_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=SafetyPlanForm(project_choice=project_records)
        MSID= get_service_plan('view safetyplan')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = SafetyPlanForm(request.POST,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create safetyplan')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/safetyplan')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'safetyplan.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def safetyplan_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view safetyplan')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "safetyplan_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = SafetyPlanForm(initial=master_view)    
        MSID= get_service_plan('view safetyplan')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "safetyplan_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'safetyplan_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def safetyplan_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view safetyplan')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "safetyplan_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = SafetyPlanForm(initial=master_type_edit,project_choice=project_records)

        MSID= get_service_plan('view safetyplan')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update safetyplan')
            if MSID is None:
                print('MISID not found')
            form = SafetyPlanForm(request.POST,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['safetyplan_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/safetyplan')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "safetyplan_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'safetyplan_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def safetyplan_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete safetyplan')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "safetyplan_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/safetyplan')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def subcontractorcontract_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view subcontractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            subcontractor_records = response['data']
        else:
            print('Data not found in response')
        form=SubcontractorContractForm(project_choice=project_records,subcontractor_choice=subcontractor_records)
        MSID= get_service_plan('view subcontractorcontract')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = SubcontractorContractForm(request.POST,project_choice=project_records,subcontractor_choice=subcontractor_records)
            if form.is_valid():
                MSID= get_service_plan('create subcontractorcontract')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['signed_date'] = cleaned_data['signed_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/subcontractorcontract')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'subcontractorcontract.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def subcontractorcontract_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view subcontractorcontract')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "subcontractorcontract_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = SubcontractorContractForm(initial=master_view)    
        MSID= get_service_plan('view subcontractorcontract')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "subcontractorcontract_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'subcontractorcontract_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def subcontractorcontract_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view subcontractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            subcontractor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view subcontractorcontract')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "subcontractorcontract_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = SubcontractorContractForm(initial=master_type_edit,project_choice=project_records,subcontractor_choice=subcontractor_records)

        MSID= get_service_plan('view subcontractorcontract')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update subcontractorcontract')
            if MSID is None:
                print('MISID not found')
            form = SubcontractorContractForm(request.POST,project_choice=project_records,subcontractor_choice=subcontractor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['subcontractorcontract_id'] = pk    
                cleaned_data['signed_date'] = cleaned_data['signed_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/subcontractorcontract')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "subcontractorcontract_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'subcontractorcontract_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def subcontractorcontract_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete subcontractorcontract')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "subcontractorcontract_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/subcontractorcontract')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def resourceavailability_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view resource')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            resource_records = response['data']
        else:
            print('Data not found in response')
        form=ResourceAvailabilityForm(resource_choice=resource_records)
        MSID= get_service_plan('view resourceavailability')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ResourceAvailabilityForm(request.POST,resource_choice=resource_records)
            if form.is_valid():
                MSID= get_service_plan('create resourceavailability')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['available_from'] = cleaned_data['available_from'].strftime('%Y-%m-%d')
                cleaned_data['available_until'] = cleaned_data['available_until'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourceavailability')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'resourceavailability.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceavailability_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view resourceavailability')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "resourceavailability_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ResourceAvailabilityForm(initial=master_view)    
        MSID= get_service_plan('view resourceavailability')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "resourceavailability_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'resourceavailability_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceavailability_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view resource')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            resource_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view resourceavailability')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "resourceavailability_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ResourceAvailabilityForm(initial=master_type_edit,resource_choice=resource_records)

        MSID= get_service_plan('view resourceavailability')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update resourceavailability')
            if MSID is None:
                print('MISID not found')
            form = ResourceAvailabilityForm(request.POST,resource_choice=resource_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['resourceavailability_id'] = pk    
                cleaned_data['available_from'] = cleaned_data['available_from'].strftime('%Y-%m-%d')
                cleaned_data['available_until'] = cleaned_data['available_until'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourceavailability')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "resourceavailability_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'resourceavailability_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceavailability_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete resourceavailability')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "resourceavailability_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/resourceavailability')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def clarificationdocument_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view rfprfq')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            rfp_rfq_records = response['data']
        else:
            print('Data not found in response')
        form=ClarificationDocumentForm(rfp_rfq_choice=rfp_rfq_records)
        MSID= get_service_plan('view clarificationdocument')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ClarificationDocumentForm(request.POST,rfp_rfq_choice=rfp_rfq_records)
            if form.is_valid():
                MSID= get_service_plan('create clarificationdocument')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clarificationdocument')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'clarificationdocument.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clarificationdocument_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view clarificationdocument')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "clarificationdocument_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ClarificationDocumentForm(initial=master_view)    
        MSID= get_service_plan('view clarificationdocument')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "clarificationdocument_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'clarificationdocument_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clarificationdocument_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view rfprfq')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            rfp_rfq_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view clarificationdocument')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "clarificationdocument_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ClarificationDocumentForm(initial=master_type_edit,rfp_rfq_choice=rfp_rfq_records)

        MSID= get_service_plan('view clarificationdocument')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update clarificationdocument')
            if MSID is None:
                print('MISID not found')
            form = ClarificationDocumentForm(request.POST,rfp_rfq_choice=rfp_rfq_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['clarificationdocument_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clarificationdocument')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "clarificationdocument_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'clarificationdocument_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clarificationdocument_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete clarificationdocument')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "clarificationdocument_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/clarificationdocument')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def stakeholder_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view role')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            role_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=StakeholderForm(role_choice=role_records,project_choice=project_records)
        MSID= get_service_plan('view stakeholder')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = StakeholderForm(request.POST,role_choice=role_records,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create stakeholder')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/stakeholder')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'stakeholder.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stakeholder_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view stakeholder')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "stakeholder_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = StakeholderForm(initial=master_view)    
        MSID= get_service_plan('view stakeholder')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "stakeholder_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'stakeholder_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stakeholder_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view role')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            role_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view stakeholder')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "stakeholder_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = StakeholderForm(initial=master_type_edit,role_choice=role_records,project_choice=project_records)

        MSID= get_service_plan('view stakeholder')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update stakeholder')
            if MSID is None:
                print('MISID not found')
            form = StakeholderForm(request.POST,role_choice=role_records,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['stakeholder_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/stakeholder')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "stakeholder_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'stakeholder_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stakeholder_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete stakeholder')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "stakeholder_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/stakeholder')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def teammember_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view role')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            role_records = response['data']
        else:
            print('Data not found in response')
        form=TeamMemberForm(project_choice=project_records,role_choice=role_records)
        MSID= get_service_plan('view teammember')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = TeamMemberForm(request.POST,project_choice=project_records,role_choice=role_records)
            if form.is_valid():
                MSID= get_service_plan('create teammember')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/teammember')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'teammember.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def teammember_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view teammember')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "teammember_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TeamMemberForm(initial=master_view)    
        MSID= get_service_plan('view teammember')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "teammember_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'teammember_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def teammember_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view role')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            role_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view teammember')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "teammember_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TeamMemberForm(initial=master_type_edit,project_choice=project_records,role_choice=role_records)

        MSID= get_service_plan('view teammember')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update teammember')
            if MSID is None:
                print('MISID not found')
            form = TeamMemberForm(request.POST,project_choice=project_records,role_choice=role_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['teammember_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/teammember')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "teammember_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'teammember_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def teammember_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete teammember')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "teammember_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/teammember')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def expense_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view account')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            account_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view vendor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        form=ExpenseForm(project_choice=project_records,account_choice=account_records,vendor_choice=vendor_records)
        MSID= get_service_plan('view expense')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ExpenseForm(request.POST,project_choice=project_records,account_choice=account_records,vendor_choice=vendor_records)
            if form.is_valid():
                MSID= get_service_plan('create expense')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/expense')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'expense.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def expense_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view expense')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "expense_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ExpenseForm(initial=master_view)    
        MSID= get_service_plan('view expense')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "expense_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'expense_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def expense_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view account')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            account_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view vendor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view expense')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "expense_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ExpenseForm(initial=master_type_edit,project_choice=project_records,account_choice=account_records,vendor_choice=vendor_records)

        MSID= get_service_plan('view expense')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update expense')
            if MSID is None:
                print('MISID not found')
            form = ExpenseForm(request.POST,project_choice=project_records,account_choice=account_records,vendor_choice=vendor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['expense_id'] = pk    
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/expense')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "expense_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'expense_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def expense_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete expense')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "expense_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/expense')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def prequalificationquestionnaire_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        form=PrequalificationQuestionnaireForm(vendor_choice=vendor_records)
        MSID= get_service_plan('view prequalificationquestionnaire')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = PrequalificationQuestionnaireForm(request.POST,vendor_choice=vendor_records)
            if form.is_valid():
                MSID= get_service_plan('create prequalificationquestionnaire')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/prequalificationquestionnaire')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'prequalificationquestionnaire.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def prequalificationquestionnaire_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view prequalificationquestionnaire')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "prequalificationquestionnaire_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = PrequalificationQuestionnaireForm(initial=master_view)    
        MSID= get_service_plan('view prequalificationquestionnaire')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "prequalificationquestionnaire_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'prequalificationquestionnaire_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def prequalificationquestionnaire_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view prequalificationquestionnaire')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "prequalificationquestionnaire_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = PrequalificationQuestionnaireForm(initial=master_type_edit,vendor_choice=vendor_records)

        MSID= get_service_plan('view prequalificationquestionnaire')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update prequalificationquestionnaire')
            if MSID is None:
                print('MISID not found')
            form = PrequalificationQuestionnaireForm(request.POST,vendor_choice=vendor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['prequalificationquestionnaire_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/prequalificationquestionnaire')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "prequalificationquestionnaire_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'prequalificationquestionnaire_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def prequalificationquestionnaire_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete prequalificationquestionnaire')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "prequalificationquestionnaire_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/prequalificationquestionnaire')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def rfprfqdistribution_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view rfprfq')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            rfp_rfq_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view vendor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        form=RFPRFQDistributionForm(rfp_rfq_choice=rfp_rfq_records,vendor_choice=vendor_records)
        MSID= get_service_plan('view rfprfqdistribution')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = RFPRFQDistributionForm(request.POST,rfp_rfq_choice=rfp_rfq_records,vendor_choice=vendor_records)
            if form.is_valid():
                MSID= get_service_plan('create rfprfqdistribution')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date_sent'] = cleaned_data['date_sent'].strftime('%Y-%m-%d %H:%M:%S')
                cleaned_data['submission_date'] = cleaned_data['submission_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/rfprfqdistribution')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'rfprfqdistribution.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def rfprfqdistribution_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view rfprfqdistribution')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "rfprfqdistribution_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = RFPRFQDistributionForm(initial=master_view)    
        MSID= get_service_plan('view rfprfqdistribution')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "rfprfqdistribution_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'rfprfqdistribution_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def rfprfqdistribution_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view rfprfq')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            rfp_rfq_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view vendor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view rfprfqdistribution')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "rfprfqdistribution_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = RFPRFQDistributionForm(initial=master_type_edit,rfp_rfq_choice=rfp_rfq_records,vendor_choice=vendor_records)

        MSID= get_service_plan('view rfprfqdistribution')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update rfprfqdistribution')
            if MSID is None:
                print('MISID not found')
            form = RFPRFQDistributionForm(request.POST,rfp_rfq_choice=rfp_rfq_records,vendor_choice=vendor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['rfprfqdistribution_id'] = pk    
                cleaned_data['date_sent'] = cleaned_data['date_sent'].strftime('%Y-%m-%d %H:%M:%S')
                cleaned_data['submission_date'] = cleaned_data['submission_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/rfprfqdistribution')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "rfprfqdistribution_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'rfprfqdistribution_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def rfprfqdistribution_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete rfprfqdistribution')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "rfprfqdistribution_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/rfprfqdistribution')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def supplierperformanceevaluation_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        form=SupplierPerformanceEvaluationForm(vendor_choice=vendor_records)
        MSID= get_service_plan('view supplierperformanceevaluation')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = SupplierPerformanceEvaluationForm(request.POST,vendor_choice=vendor_records)
            if form.is_valid():
                MSID= get_service_plan('create supplierperformanceevaluation')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['evaluation_date'] = cleaned_data['evaluation_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/supplierperformanceevaluation')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'supplierperformanceevaluation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def supplierperformanceevaluation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view supplierperformanceevaluation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "supplierperformanceevaluation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = SupplierPerformanceEvaluationForm(initial=master_view)    
        MSID= get_service_plan('view supplierperformanceevaluation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "supplierperformanceevaluation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'supplierperformanceevaluation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def supplierperformanceevaluation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view supplierperformanceevaluation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "supplierperformanceevaluation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = SupplierPerformanceEvaluationForm(initial=master_type_edit,vendor_choice=vendor_records)

        MSID= get_service_plan('view supplierperformanceevaluation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update supplierperformanceevaluation')
            if MSID is None:
                print('MISID not found')
            form = SupplierPerformanceEvaluationForm(request.POST,vendor_choice=vendor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['supplierperformanceevaluation_id'] = pk    
                cleaned_data['evaluation_date'] = cleaned_data['evaluation_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/supplierperformanceevaluation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "supplierperformanceevaluation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'supplierperformanceevaluation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def supplierperformanceevaluation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete supplierperformanceevaluation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "supplierperformanceevaluation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/supplierperformanceevaluation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def vendorclarification_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view rfprfq')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            rfp_rfq_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view vendor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        form=VendorClarificationForm(rfp_rfq_choice=rfp_rfq_records,vendor_choice=vendor_records)
        MSID= get_service_plan('view vendorclarification')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = VendorClarificationForm(request.POST,rfp_rfq_choice=rfp_rfq_records,vendor_choice=vendor_records)
            if form.is_valid():
                MSID= get_service_plan('create vendorclarification')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/vendorclarification')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'vendorclarification.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def vendorclarification_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view vendorclarification')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "vendorclarification_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = VendorClarificationForm(initial=master_view)    
        MSID= get_service_plan('view vendorclarification')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "vendorclarification_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'vendorclarification_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def vendorclarification_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view rfprfq')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            rfp_rfq_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view vendor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view vendorclarification')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "vendorclarification_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = VendorClarificationForm(initial=master_type_edit,rfp_rfq_choice=rfp_rfq_records,vendor_choice=vendor_records)

        MSID= get_service_plan('view vendorclarification')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update vendorclarification')
            if MSID is None:
                print('MISID not found')
            form = VendorClarificationForm(request.POST,rfp_rfq_choice=rfp_rfq_records,vendor_choice=vendor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['vendorclarification_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/vendorclarification')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "vendorclarification_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'vendorclarification_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def vendorclarification_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete vendorclarification')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "vendorclarification_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/vendorclarification')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def vendorprequalificationstatus_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        form=VendorPrequalificationStatusForm(vendor_choice=vendor_records)
        MSID= get_service_plan('view vendorprequalificationstatus')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = VendorPrequalificationStatusForm(request.POST,vendor_choice=vendor_records)
            if form.is_valid():
                MSID= get_service_plan('create vendorprequalificationstatus')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['prequalification_date'] = cleaned_data['prequalification_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/vendorprequalificationstatus')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'vendorprequalificationstatus.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def vendorprequalificationstatus_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view vendorprequalificationstatus')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "vendorprequalificationstatus_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = VendorPrequalificationStatusForm(initial=master_view)    
        MSID= get_service_plan('view vendorprequalificationstatus')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "vendorprequalificationstatus_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'vendorprequalificationstatus_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def vendorprequalificationstatus_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view vendorprequalificationstatus')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "vendorprequalificationstatus_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = VendorPrequalificationStatusForm(initial=master_type_edit,vendor_choice=vendor_records)

        MSID= get_service_plan('view vendorprequalificationstatus')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update vendorprequalificationstatus')
            if MSID is None:
                print('MISID not found')
            form = VendorPrequalificationStatusForm(request.POST,vendor_choice=vendor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['vendorprequalificationstatus_id'] = pk    
                cleaned_data['prequalification_date'] = cleaned_data['prequalification_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/vendorprequalificationstatus')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "vendorprequalificationstatus_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'vendorprequalificationstatus_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def vendorprequalificationstatus_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete vendorprequalificationstatus')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "vendorprequalificationstatus_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/vendorprequalificationstatus')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def vendorproposal_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view rfprfq')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            rfp_rfq_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view vendor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        form=VendorProposalForm(rfp_rfq_choice=rfp_rfq_records,vendor_choice=vendor_records)
        MSID= get_service_plan('view vendorproposal')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = VendorProposalForm(request.POST,rfp_rfq_choice=rfp_rfq_records,vendor_choice=vendor_records)
            if form.is_valid():
                MSID= get_service_plan('create vendorproposal')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/vendorproposal')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'vendorproposal.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def vendorproposal_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view vendorproposal')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "vendorproposal_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = VendorProposalForm(initial=master_view)    
        MSID= get_service_plan('view vendorproposal')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "vendorproposal_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'vendorproposal_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def vendorproposal_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view rfprfq')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            rfp_rfq_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view vendor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view vendorproposal')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "vendorproposal_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = VendorProposalForm(initial=master_type_edit,rfp_rfq_choice=rfp_rfq_records,vendor_choice=vendor_records)

        MSID= get_service_plan('view vendorproposal')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update vendorproposal')
            if MSID is None:
                print('MISID not found')
            form = VendorProposalForm(request.POST,rfp_rfq_choice=rfp_rfq_records,vendor_choice=vendor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['vendorproposal_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/vendorproposal')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "vendorproposal_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'vendorproposal_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def vendorproposal_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete vendorproposal')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "vendorproposal_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/vendorproposal')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def assetaudit_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view asset')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            asset_records = response['data']
        else:
            print('Data not found in response')
        form=AssetAuditForm(asset_choice=asset_records)
        MSID= get_service_plan('view assetaudit')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = AssetAuditForm(request.POST,asset_choice=asset_records)
            if form.is_valid():
                MSID= get_service_plan('create assetaudit')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['audit_date'] = cleaned_data['audit_date'].strftime('%Y-%m-%d %H:%M:%S')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/assetaudit')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'assetaudit.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def assetaudit_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view assetaudit')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "assetaudit_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = AssetAuditForm(initial=master_view)    
        MSID= get_service_plan('view assetaudit')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "assetaudit_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'assetaudit_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def assetaudit_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view asset')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            asset_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view assetaudit')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "assetaudit_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = AssetAuditForm(initial=master_type_edit,asset_choice=asset_records)

        MSID= get_service_plan('view assetaudit')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update assetaudit')
            if MSID is None:
                print('MISID not found')
            form = AssetAuditForm(request.POST,asset_choice=asset_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['assetaudit_id'] = pk    
                cleaned_data['audit_date'] = cleaned_data['audit_date'].strftime('%Y-%m-%d %H:%M:%S')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/assetaudit')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "assetaudit_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'assetaudit_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def assetaudit_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete assetaudit')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "assetaudit_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/assetaudit')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def assetmaintenance_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view asset')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            asset_records = response['data']
        else:
            print('Data not found in response')
        form=AssetMaintenanceForm(asset_choice=asset_records)
        MSID= get_service_plan('view assetmaintenance')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = AssetMaintenanceForm(request.POST,asset_choice=asset_records)
            if form.is_valid():
                MSID= get_service_plan('create assetmaintenance')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['maintenance_date'] = cleaned_data['maintenance_date'].strftime('%Y-%m-%d %H:%M:%S')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/assetmaintenance')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'assetmaintenance.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def assetmaintenance_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view assetmaintenance')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "assetmaintenance_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = AssetMaintenanceForm(initial=master_view)    
        MSID= get_service_plan('view assetmaintenance')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "assetmaintenance_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'assetmaintenance_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def assetmaintenance_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view asset')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            asset_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view assetmaintenance')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "assetmaintenance_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = AssetMaintenanceForm(initial=master_type_edit,asset_choice=asset_records)

        MSID= get_service_plan('view assetmaintenance')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update assetmaintenance')
            if MSID is None:
                print('MISID not found')
            form = AssetMaintenanceForm(request.POST,asset_choice=asset_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['assetmaintenance_id'] = pk    
                cleaned_data['maintenance_date'] = cleaned_data['maintenance_date'].strftime('%Y-%m-%d %H:%M:%S')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/assetmaintenance')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "assetmaintenance_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'assetmaintenance_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def assetmaintenance_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete assetmaintenance')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "assetmaintenance_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/assetmaintenance')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def depreciation_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view asset')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            asset_records = response['data']
        else:
            print('Data not found in response')
        form=DepreciationForm(asset_choice=asset_records)
        MSID= get_service_plan('view depreciation')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = DepreciationForm(request.POST,asset_choice=asset_records)
            if form.is_valid():
                MSID= get_service_plan('create depreciation')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['depreciation_date'] = cleaned_data['depreciation_date'].strftime('%Y-%m-%d %H:%M:%S')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/depreciation')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'depreciation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def depreciation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view depreciation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "depreciation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = DepreciationForm(initial=master_view)    
        MSID= get_service_plan('view depreciation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "depreciation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'depreciation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def depreciation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view asset')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            asset_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view depreciation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "depreciation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = DepreciationForm(initial=master_type_edit,asset_choice=asset_records)

        MSID= get_service_plan('view depreciation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update depreciation')
            if MSID is None:
                print('MISID not found')
            form = DepreciationForm(request.POST,asset_choice=asset_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['depreciation_id'] = pk    
                cleaned_data['depreciation_date'] = cleaned_data['depreciation_date'].strftime('%Y-%m-%d %H:%M:%S')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/depreciation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "depreciation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'depreciation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def depreciation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete depreciation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "depreciation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/depreciation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def submissionfollowup_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view proposalpreparation')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            proposal_records = response['data']
        else:
            print('Data not found in response')
        form=SubmissionFollowUpForm(proposal_choice=proposal_records)
        MSID= get_service_plan('view submissionfollowup')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = SubmissionFollowUpForm(request.POST,proposal_choice=proposal_records)
            if form.is_valid():
                MSID= get_service_plan('create submissionfollowup')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['submission_date'] = cleaned_data['submission_date'].strftime('%Y-%m-%d')
                cleaned_data['follow_up_date'] = cleaned_data['follow_up_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/submissionfollowup')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'submissionfollowup.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def submissionfollowup_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view submissionfollowup')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "submissionfollowup_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = SubmissionFollowUpForm(initial=master_view)    
        MSID= get_service_plan('view submissionfollowup')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "submissionfollowup_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'submissionfollowup_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def submissionfollowup_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view proposalpreparation')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            proposal_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view submissionfollowup')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "submissionfollowup_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = SubmissionFollowUpForm(initial=master_type_edit,proposal_choice=proposal_records)

        MSID= get_service_plan('view submissionfollowup')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update submissionfollowup')
            if MSID is None:
                print('MISID not found')
            form = SubmissionFollowUpForm(request.POST,proposal_choice=proposal_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['submissionfollowup_id'] = pk    
                cleaned_data['submission_date'] = cleaned_data['submission_date'].strftime('%Y-%m-%d')
                cleaned_data['follow_up_date'] = cleaned_data['follow_up_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/submissionfollowup')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "submissionfollowup_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'submissionfollowup_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def submissionfollowup_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete submissionfollowup')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "submissionfollowup_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/submissionfollowup')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def negotiationandaward_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view bidsubmission')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            bid_submission_records = response['data']
        else:
            print('Data not found in response')
        form=NegotiationAndAwardForm(bid_submission_choice=bid_submission_records)
        MSID= get_service_plan('view negotiationandaward')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = NegotiationAndAwardForm(request.POST,bid_submission_choice=bid_submission_records)
            if form.is_valid():
                MSID= get_service_plan('create negotiationandaward')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['negotiation_date'] = cleaned_data['negotiation_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/negotiationandaward')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'negotiationandaward.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def negotiationandaward_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view negotiationandaward')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "negotiationandaward_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = NegotiationAndAwardForm(initial=master_view)    
        MSID= get_service_plan('view negotiationandaward')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "negotiationandaward_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'negotiationandaward_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def negotiationandaward_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view bidsubmission')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            bid_submission_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view negotiationandaward')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "negotiationandaward_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = NegotiationAndAwardForm(initial=master_type_edit,bid_submission_choice=bid_submission_records)

        MSID= get_service_plan('view negotiationandaward')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update negotiationandaward')
            if MSID is None:
                print('MISID not found')
            form = NegotiationAndAwardForm(request.POST,bid_submission_choice=bid_submission_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['negotiationandaward_id'] = pk    
                cleaned_data['negotiation_date'] = cleaned_data['negotiation_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/negotiationandaward')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "negotiationandaward_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'negotiationandaward_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def negotiationandaward_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete negotiationandaward')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "negotiationandaward_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/negotiationandaward')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def postsubmissionfollowup_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view bidsubmission')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            bid_submission_records = response['data']
        else:
            print('Data not found in response')
        form=PostSubmissionFollowUpForm(bid_submission_choice=bid_submission_records)
        MSID= get_service_plan('view postsubmissionfollowup')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = PostSubmissionFollowUpForm(request.POST,bid_submission_choice=bid_submission_records)
            if form.is_valid():
                MSID= get_service_plan('create postsubmissionfollowup')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['follow_up_date'] = cleaned_data['follow_up_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/postsubmissionfollowup')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'postsubmissionfollowup.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def postsubmissionfollowup_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view postsubmissionfollowup')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "postsubmissionfollowup_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = PostSubmissionFollowUpForm(initial=master_view)    
        MSID= get_service_plan('view postsubmissionfollowup')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "postsubmissionfollowup_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'postsubmissionfollowup_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def postsubmissionfollowup_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view bidsubmission')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            bid_submission_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view postsubmissionfollowup')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "postsubmissionfollowup_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = PostSubmissionFollowUpForm(initial=master_type_edit,bid_submission_choice=bid_submission_records)

        MSID= get_service_plan('view postsubmissionfollowup')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update postsubmissionfollowup')
            if MSID is None:
                print('MISID not found')
            form = PostSubmissionFollowUpForm(request.POST,bid_submission_choice=bid_submission_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['postsubmissionfollowup_id'] = pk    
                cleaned_data['follow_up_date'] = cleaned_data['follow_up_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/postsubmissionfollowup')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "postsubmissionfollowup_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'postsubmissionfollowup_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def postsubmissionfollowup_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete postsubmissionfollowup')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "postsubmissionfollowup_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/postsubmissionfollowup')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def equipmentassignment_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view equipment')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            equipment_records = response['data']
        else:
            print('Data not found in response')
        form=EquipmentAssignmentForm(equipment_choice=equipment_records)
        MSID= get_service_plan('view equipmentassignment')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = EquipmentAssignmentForm(request.POST,equipment_choice=equipment_records)
            if form.is_valid():
                MSID= get_service_plan('create equipmentassignment')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['assigned_date'] = cleaned_data['assigned_date'].strftime('%Y-%m-%d %H:%M:%S')
                cleaned_data['return_date'] = cleaned_data['return_date'].strftime('%Y-%m-%d %H:%M:%S')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/equipmentassignment')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'equipmentassignment.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipmentassignment_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view equipmentassignment')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "equipmentassignment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = EquipmentAssignmentForm(initial=master_view)    
        MSID= get_service_plan('view equipmentassignment')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "equipmentassignment_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'equipmentassignment_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipmentassignment_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view equipment')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            equipment_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view equipmentassignment')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "equipmentassignment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = EquipmentAssignmentForm(initial=master_type_edit,equipment_choice=equipment_records)

        MSID= get_service_plan('view equipmentassignment')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update equipmentassignment')
            if MSID is None:
                print('MISID not found')
            form = EquipmentAssignmentForm(request.POST,equipment_choice=equipment_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['equipmentassignment_id'] = pk    
                cleaned_data['assigned_date'] = cleaned_data['assigned_date'].strftime('%Y-%m-%d %H:%M:%S')
                cleaned_data['return_date'] = cleaned_data['return_date'].strftime('%Y-%m-%d %H:%M:%S')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/equipmentassignment')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "equipmentassignment_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'equipmentassignment_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipmentassignment_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete equipmentassignment')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "equipmentassignment_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/equipmentassignment')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def equipmentaudit_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view equipment')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            equipment_records = response['data']
        else:
            print('Data not found in response')
        form=EquipmentAuditForm(equipment_choice=equipment_records)
        MSID= get_service_plan('view equipmentaudit')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = EquipmentAuditForm(request.POST,equipment_choice=equipment_records)
            if form.is_valid():
                MSID= get_service_plan('create equipmentaudit')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['audit_date'] = cleaned_data['audit_date'].strftime('%Y-%m-%d %H:%M:%S')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/equipmentaudit')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'equipmentaudit.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipmentaudit_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view equipmentaudit')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "equipmentaudit_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = EquipmentAuditForm(initial=master_view)    
        MSID= get_service_plan('view equipmentaudit')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "equipmentaudit_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'equipmentaudit_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipmentaudit_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view equipment')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            equipment_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view equipmentaudit')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "equipmentaudit_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = EquipmentAuditForm(initial=master_type_edit,equipment_choice=equipment_records)

        MSID= get_service_plan('view equipmentaudit')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update equipmentaudit')
            if MSID is None:
                print('MISID not found')
            form = EquipmentAuditForm(request.POST,equipment_choice=equipment_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['equipmentaudit_id'] = pk    
                cleaned_data['audit_date'] = cleaned_data['audit_date'].strftime('%Y-%m-%d %H:%M:%S')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/equipmentaudit')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "equipmentaudit_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'equipmentaudit_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipmentaudit_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete equipmentaudit')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "equipmentaudit_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/equipmentaudit')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def equipmentmaintenance_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view equipment')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            equipment_records = response['data']
        else:
            print('Data not found in response')
        form=EquipmentMaintenanceForm(equipment_choice=equipment_records)
        MSID= get_service_plan('view equipmentmaintenance')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = EquipmentMaintenanceForm(request.POST,equipment_choice=equipment_records)
            if form.is_valid():
                MSID= get_service_plan('create equipmentmaintenance')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['maintenance_date'] = cleaned_data['maintenance_date'].strftime('%Y-%m-%d %H:%M:%S')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/equipmentmaintenance')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'equipmentmaintenance.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipmentmaintenance_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view equipmentmaintenance')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "equipmentmaintenance_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = EquipmentMaintenanceForm(initial=master_view)    
        MSID= get_service_plan('view equipmentmaintenance')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "equipmentmaintenance_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'equipmentmaintenance_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipmentmaintenance_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view equipment')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            equipment_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view equipmentmaintenance')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "equipmentmaintenance_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = EquipmentMaintenanceForm(initial=master_type_edit,equipment_choice=equipment_records)

        MSID= get_service_plan('view equipmentmaintenance')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update equipmentmaintenance')
            if MSID is None:
                print('MISID not found')
            form = EquipmentMaintenanceForm(request.POST,equipment_choice=equipment_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['equipmentmaintenance_id'] = pk    
                cleaned_data['maintenance_date'] = cleaned_data['maintenance_date'].strftime('%Y-%m-%d %H:%M:%S')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/equipmentmaintenance')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "equipmentmaintenance_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'equipmentmaintenance_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def equipmentmaintenance_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete equipmentmaintenance')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "equipmentmaintenance_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/equipmentmaintenance')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def inventoryaudit_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view item')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            item_records = response['data']
        else:
            print('Data not found in response')
        form=InventoryAuditForm(item_choice=item_records)
        MSID= get_service_plan('view inventoryaudit')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = InventoryAuditForm(request.POST,item_choice=item_records)
            if form.is_valid():
                MSID= get_service_plan('create inventoryaudit')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['audit_date'] = cleaned_data['audit_date'].strftime('%Y-%m-%d %H:%M:%S')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/inventoryaudit')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'inventoryaudit.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def inventoryaudit_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view inventoryaudit')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "inventoryaudit_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = InventoryAuditForm(initial=master_view)    
        MSID= get_service_plan('view inventoryaudit')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "inventoryaudit_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'inventoryaudit_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def inventoryaudit_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view item')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            item_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view inventoryaudit')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "inventoryaudit_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = InventoryAuditForm(initial=master_type_edit,item_choice=item_records)

        MSID= get_service_plan('view inventoryaudit')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update inventoryaudit')
            if MSID is None:
                print('MISID not found')
            form = InventoryAuditForm(request.POST,item_choice=item_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['inventoryaudit_id'] = pk    
                cleaned_data['audit_date'] = cleaned_data['audit_date'].strftime('%Y-%m-%d %H:%M:%S')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/inventoryaudit')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "inventoryaudit_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'inventoryaudit_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def inventoryaudit_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete inventoryaudit')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "inventoryaudit_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/inventoryaudit')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def requisition_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view item')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            item_records = response['data']
        else:
            print('Data not found in response')
        form=RequisitionForm(item_choice=item_records)
        MSID= get_service_plan('view requisition')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = RequisitionForm(request.POST,item_choice=item_records)
            if form.is_valid():
                MSID= get_service_plan('create requisition')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date_requested'] = cleaned_data['date_requested'].strftime('%Y-%m-%d %H:%M:%S')
                cleaned_data['date_fulfilled'] = cleaned_data['date_fulfilled'].strftime('%Y-%m-%d %H:%M:%S')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/requisition')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'requisition.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def requisition_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view requisition')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "requisition_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = RequisitionForm(initial=master_view)    
        MSID= get_service_plan('view requisition')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "requisition_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'requisition_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def requisition_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view item')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            item_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view requisition')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "requisition_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = RequisitionForm(initial=master_type_edit,item_choice=item_records)

        MSID= get_service_plan('view requisition')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update requisition')
            if MSID is None:
                print('MISID not found')
            form = RequisitionForm(request.POST,item_choice=item_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['requisition_id'] = pk    
                cleaned_data['date_requested'] = cleaned_data['date_requested'].strftime('%Y-%m-%d %H:%M:%S')
                cleaned_data['date_fulfilled'] = cleaned_data['date_fulfilled'].strftime('%Y-%m-%d %H:%M:%S')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/requisition')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "requisition_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'requisition_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def requisition_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete requisition')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "requisition_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/requisition')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def stockentry_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view item')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            item_records = response['data']
        else:
            print('Data not found in response')
        form=StockEntryForm(item_choice=item_records)
        MSID= get_service_plan('view stockentry')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = StockEntryForm(request.POST,item_choice=item_records)
            if form.is_valid():
                MSID= get_service_plan('create stockentry')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d %H:%M:%S')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/stockentry')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'stockentry.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stockentry_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view stockentry')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "stockentry_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = StockEntryForm(initial=master_view)    
        MSID= get_service_plan('view stockentry')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "stockentry_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'stockentry_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stockentry_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view item')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            item_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view stockentry')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "stockentry_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = StockEntryForm(initial=master_type_edit,item_choice=item_records)

        MSID= get_service_plan('view stockentry')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update stockentry')
            if MSID is None:
                print('MISID not found')
            form = StockEntryForm(request.POST,item_choice=item_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['stockentry_id'] = pk    
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d %H:%M:%S')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/stockentry')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "stockentry_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'stockentry_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stockentry_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete stockentry')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "stockentry_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/stockentry')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def clientinteraction_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view lead')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            lead_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view clientinteractiontype')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            interaction_type_records = response['data']
        else:
            print('Data not found in response')
        form=ClientInteractionForm(lead_choice=lead_records,interaction_type_choice=interaction_type_records)
        MSID= get_service_plan('view clientinteraction')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ClientInteractionForm(request.POST,lead_choice=lead_records,interaction_type_choice=interaction_type_records)
            if form.is_valid():
                MSID= get_service_plan('create clientinteraction')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['follow_up_date'] = cleaned_data['follow_up_date'].strftime('%Y-%m-%d %H:%M:%S')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clientinteraction')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'clientinteraction.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientinteraction_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view clientinteraction')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "clientinteraction_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ClientInteractionForm(initial=master_view)    
        MSID= get_service_plan('view clientinteraction')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "clientinteraction_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'clientinteraction_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientinteraction_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view lead')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            lead_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view clientinteractiontype')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            interaction_type_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view clientinteraction')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "clientinteraction_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ClientInteractionForm(initial=master_type_edit,lead_choice=lead_records,interaction_type_choice=interaction_type_records)

        MSID= get_service_plan('view clientinteraction')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update clientinteraction')
            if MSID is None:
                print('MISID not found')
            form = ClientInteractionForm(request.POST,lead_choice=lead_records,interaction_type_choice=interaction_type_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['clientinteraction_id'] = pk    
                cleaned_data['follow_up_date'] = cleaned_data['follow_up_date'].strftime('%Y-%m-%d %H:%M:%S')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clientinteraction')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "clientinteraction_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'clientinteraction_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientinteraction_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete clientinteraction')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "clientinteraction_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/clientinteraction')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def opportunity_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view lead')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            lead_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view salesstage')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            stage_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view salesrepresentative')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            assigned_to_records = response['data']
        else:
            print('Data not found in response')
        form=OpportunityForm(lead_choice=lead_records,stage_choice=stage_records,assigned_to_choice=assigned_to_records)
        MSID= get_service_plan('view opportunity')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = OpportunityForm(request.POST,lead_choice=lead_records,stage_choice=stage_records,assigned_to_choice=assigned_to_records)
            if form.is_valid():
                MSID= get_service_plan('create opportunity')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['expected_close_date'] = cleaned_data['expected_close_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/opportunity')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'opportunity.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def opportunity_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view opportunity')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "opportunity_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = OpportunityForm(initial=master_view)    
        MSID= get_service_plan('view opportunity')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "opportunity_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'opportunity_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def opportunity_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view lead')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            lead_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view salesstage')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            stage_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view salesrepresentative')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            assigned_to_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view opportunity')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "opportunity_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = OpportunityForm(initial=master_type_edit,lead_choice=lead_records,stage_choice=stage_records,assigned_to_choice=assigned_to_records)

        MSID= get_service_plan('view opportunity')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update opportunity')
            if MSID is None:
                print('MISID not found')
            form = OpportunityForm(request.POST,lead_choice=lead_records,stage_choice=stage_records,assigned_to_choice=assigned_to_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['opportunity_id'] = pk    
                cleaned_data['expected_close_date'] = cleaned_data['expected_close_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/opportunity')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "opportunity_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'opportunity_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def opportunity_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete opportunity')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "opportunity_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/opportunity')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def documentedrequirement_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view procurementneed')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            procurement_need_records = response['data']
        else:
            print('Data not found in response')
        form=DocumentedRequirementForm(procurement_need_choice=procurement_need_records)
        MSID= get_service_plan('view documentedrequirement')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = DocumentedRequirementForm(request.POST,procurement_need_choice=procurement_need_records)
            if form.is_valid():
                MSID= get_service_plan('create documentedrequirement')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['timeline'] = cleaned_data['timeline'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/documentedrequirement')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'documentedrequirement.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def documentedrequirement_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view documentedrequirement')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "documentedrequirement_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = DocumentedRequirementForm(initial=master_view)    
        MSID= get_service_plan('view documentedrequirement')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "documentedrequirement_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'documentedrequirement_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def documentedrequirement_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view procurementneed')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            procurement_need_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view documentedrequirement')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "documentedrequirement_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = DocumentedRequirementForm(initial=master_type_edit,procurement_need_choice=procurement_need_records)

        MSID= get_service_plan('view documentedrequirement')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update documentedrequirement')
            if MSID is None:
                print('MISID not found')
            form = DocumentedRequirementForm(request.POST,procurement_need_choice=procurement_need_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['documentedrequirement_id'] = pk    
                cleaned_data['timeline'] = cleaned_data['timeline'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/documentedrequirement')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "documentedrequirement_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'documentedrequirement_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def documentedrequirement_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete documentedrequirement')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "documentedrequirement_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/documentedrequirement')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def correctivepreventiveaction_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view audit')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            audit_records = response['data']
        else:
            print('Data not found in response')
        form=CorrectivePreventiveActionForm(audit_choice=audit_records)
        MSID= get_service_plan('view correctivepreventiveaction')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = CorrectivePreventiveActionForm(request.POST,audit_choice=audit_records)
            if form.is_valid():
                MSID= get_service_plan('create correctivepreventiveaction')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date_taken'] = cleaned_data['date_taken'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/correctivepreventiveaction')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'correctivepreventiveaction.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def correctivepreventiveaction_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view correctivepreventiveaction')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "correctivepreventiveaction_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = CorrectivePreventiveActionForm(initial=master_view)    
        MSID= get_service_plan('view correctivepreventiveaction')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "correctivepreventiveaction_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'correctivepreventiveaction_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def correctivepreventiveaction_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view audit')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            audit_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view correctivepreventiveaction')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "correctivepreventiveaction_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = CorrectivePreventiveActionForm(initial=master_type_edit,audit_choice=audit_records)

        MSID= get_service_plan('view correctivepreventiveaction')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update correctivepreventiveaction')
            if MSID is None:
                print('MISID not found')
            form = CorrectivePreventiveActionForm(request.POST,audit_choice=audit_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['correctivepreventiveaction_id'] = pk    
                cleaned_data['date_taken'] = cleaned_data['date_taken'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/correctivepreventiveaction')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "correctivepreventiveaction_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'correctivepreventiveaction_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def correctivepreventiveaction_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete correctivepreventiveaction')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "correctivepreventiveaction_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/correctivepreventiveaction')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def changeorder_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view contract')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
        form=ChangeOrderForm(contract_choice=contract_records)
        MSID= get_service_plan('view changeorder')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ChangeOrderForm(request.POST,contract_choice=contract_records)
            if form.is_valid():
                MSID= get_service_plan('create changeorder')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['submitted_date'] = cleaned_data['submitted_date'].strftime('%Y-%m-%d')
                cleaned_data['approved_date'] = cleaned_data['approved_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/changeorder')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'changeorder.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def changeorder_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view changeorder')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "changeorder_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ChangeOrderForm(initial=master_view)    
        MSID= get_service_plan('view changeorder')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "changeorder_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'changeorder_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def changeorder_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view contract')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view changeorder')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "changeorder_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ChangeOrderForm(initial=master_type_edit,contract_choice=contract_records)

        MSID= get_service_plan('view changeorder')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update changeorder')
            if MSID is None:
                print('MISID not found')
            form = ChangeOrderForm(request.POST,contract_choice=contract_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['changeorder_id'] = pk    
                cleaned_data['submitted_date'] = cleaned_data['submitted_date'].strftime('%Y-%m-%d')
                cleaned_data['approved_date'] = cleaned_data['approved_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/changeorder')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "changeorder_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'changeorder_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def changeorder_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete changeorder')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "changeorder_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/changeorder')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def contractcloseout_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     contract_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=ContractCloseoutForm(contract_choice=contract_records)
        # MSID= get_service_plan('view contractcloseout')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = ContractCloseoutForm()
        # if request.method == "POST":
        #     form = ContractCloseoutForm(request.POST,contract_choice=contract_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create contractcloseout')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
        #         cleaned_data['closeout_date'] = cleaned_data['closeout_date'].strftime('%Y-%m-%d')
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/contractcloseout')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'contractcloseout.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractcloseout_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view contractcloseout')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "contractcloseout_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ContractCloseoutForm(initial=master_view)    
        MSID= get_service_plan('view contractcloseout')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "contractcloseout_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'contractcloseout_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractcloseout_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view contractcloseout')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "contractcloseout_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ContractCloseoutForm(initial=master_type_edit,contract_choice=contract_records)

        MSID= get_service_plan('view contractcloseout')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update contractcloseout')
            if MSID is None:
                print('MISID not found')
            form = ContractCloseoutForm(request.POST,contract_choice=contract_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['contractcloseout_id'] = pk    
                cleaned_data['closeout_date'] = cleaned_data['closeout_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/contractcloseout')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "contractcloseout_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'contractcloseout_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractcloseout_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete contractcloseout')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "contractcloseout_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/contractcloseout')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def contractexecution_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view contract')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
        form=ContractExecutionForm(contract_choice=contract_records)
        MSID= get_service_plan('view contractexecution')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ContractExecutionForm(request.POST,contract_choice=contract_records)
            if form.is_valid():
                MSID= get_service_plan('create contractexecution')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['execution_date'] = cleaned_data['execution_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/contractexecution')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'contractexecution.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractexecution_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view contractexecution')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "contractexecution_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ContractExecutionForm(initial=master_view)    
        MSID= get_service_plan('view contractexecution')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "contractexecution_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'contractexecution_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractexecution_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view contract')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view contractexecution')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "contractexecution_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ContractExecutionForm(initial=master_type_edit,contract_choice=contract_records)

        MSID= get_service_plan('view contractexecution')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update contractexecution')
            if MSID is None:
                print('MISID not found')
            form = ContractExecutionForm(request.POST,contract_choice=contract_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['contractexecution_id'] = pk    
                cleaned_data['execution_date'] = cleaned_data['execution_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/contractexecution')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "contractexecution_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'contractexecution_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractexecution_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete contractexecution')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "contractexecution_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/contractexecution')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def contractmilestone_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view contract')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
        form=ContractMilestoneForm(contract_choice=contract_records)
        MSID= get_service_plan('view contractmilestone')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ContractMilestoneForm(request.POST,contract_choice=contract_records)
            if form.is_valid():
                MSID= get_service_plan('create contractmilestone')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['due_date'] = cleaned_data['due_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/contractmilestone')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'contractmilestone.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractmilestone_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view contractmilestone')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "contractmilestone_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ContractMilestoneForm(initial=master_view)    
        MSID= get_service_plan('view contractmilestone')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "contractmilestone_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'contractmilestone_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractmilestone_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view contract')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view contractmilestone')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "contractmilestone_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ContractMilestoneForm(initial=master_type_edit,contract_choice=contract_records)

        MSID= get_service_plan('view contractmilestone')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update contractmilestone')
            if MSID is None:
                print('MISID not found')
            form = ContractMilestoneForm(request.POST,contract_choice=contract_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['contractmilestone_id'] = pk    
                cleaned_data['due_date'] = cleaned_data['due_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/contractmilestone')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "contractmilestone_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'contractmilestone_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractmilestone_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete contractmilestone')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "contractmilestone_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/contractmilestone')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def legalreview_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     contract_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=LegalReviewForm(contract_choice=contract_records)
        # MSID= get_service_plan('view legalreview')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form=LegalReviewForm()
        # if request.method == "POST":
        #     form = LegalReviewForm(request.POST,contract_choice=contract_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create legalreview')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
        #         cleaned_data['review_date'] = cleaned_data['review_date'].strftime('%Y-%m-%d')
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/legalreview')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'legalreview.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def legalreview_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view legalreview')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "legalreview_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = LegalReviewForm(initial=master_view)    
        MSID= get_service_plan('view legalreview')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "legalreview_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'legalreview_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def legalreview_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view legalreview')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "legalreview_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = LegalReviewForm(initial=master_type_edit,contract_choice=contract_records)

        MSID= get_service_plan('view legalreview')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update legalreview')
            if MSID is None:
                print('MISID not found')
            form = LegalReviewForm(request.POST,contract_choice=contract_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['legalreview_id'] = pk    
                cleaned_data['review_date'] = cleaned_data['review_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/legalreview')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "legalreview_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'legalreview_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def legalreview_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete legalreview')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "legalreview_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/legalreview')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def purchaseorder_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view contract')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
        form=PurchaseOrderForm(contract_choice=contract_records)
        MSID= get_service_plan('view purchaseorder')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = PurchaseOrderForm(request.POST,contract_choice=contract_records)
            if form.is_valid():
                MSID= get_service_plan('create purchaseorder')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/purchaseorder')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'purchaseorder.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def purchaseorder_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view purchaseorder')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "purchaseorder_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = PurchaseOrderForm(initial=master_view)    
        MSID= get_service_plan('view purchaseorder')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "purchaseorder_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'purchaseorder_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def purchaseorder_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view contract')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view purchaseorder')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "purchaseorder_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = PurchaseOrderForm(initial=master_type_edit,contract_choice=contract_records)

        MSID= get_service_plan('view purchaseorder')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update purchaseorder')
            if MSID is None:
                print('MISID not found')
            form = PurchaseOrderForm(request.POST,contract_choice=contract_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['purchaseorder_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/purchaseorder')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "purchaseorder_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'purchaseorder_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def purchaseorder_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete purchaseorder')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "purchaseorder_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/purchaseorder')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def correctiveaction_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view incidentreport')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            incident_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            action_taken_by_records = response['data']
        else:
            print('Data not found in response')
        form=CorrectiveActionForm(incident_choice=incident_records,action_taken_by_choice=action_taken_by_records)
        MSID= get_service_plan('view correctiveaction')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = CorrectiveActionForm(request.POST,incident_choice=incident_records,action_taken_by_choice=action_taken_by_records)
            if form.is_valid():
                MSID= get_service_plan('create correctiveaction')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date_taken'] = cleaned_data['date_taken'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/correctiveaction')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'correctiveaction.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def correctiveaction_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view correctiveaction')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "correctiveaction_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = CorrectiveActionForm(initial=master_view)    
        MSID= get_service_plan('view correctiveaction')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "correctiveaction_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'correctiveaction_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def correctiveaction_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view incidentreport')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            incident_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            action_taken_by_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view correctiveaction')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "correctiveaction_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = CorrectiveActionForm(initial=master_type_edit,incident_choice=incident_records,action_taken_by_choice=action_taken_by_records)

        MSID= get_service_plan('view correctiveaction')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update correctiveaction')
            if MSID is None:
                print('MISID not found')
            form = CorrectiveActionForm(request.POST,incident_choice=incident_records,action_taken_by_choice=action_taken_by_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['correctiveaction_id'] = pk    
                cleaned_data['date_taken'] = cleaned_data['date_taken'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/correctiveaction')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "correctiveaction_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'correctiveaction_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def correctiveaction_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete correctiveaction')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "correctiveaction_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/correctiveaction')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def investigation_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     incident_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view user')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     investigator_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=InvestigationForm(incident_choice=incident_records,investigator_choice=investigator_records)
        # MSID= get_service_plan('view investigation')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = InvestigationForm()
        # if request.method == "POST":
        #     form = InvestigationForm(request.POST,incident_choice=incident_records,investigator_choice=investigator_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create investigation')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
        #         cleaned_data['investigation_date'] = cleaned_data['investigation_date'].strftime('%Y-%m-%d')
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/investigation')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'investigation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def investigation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view investigation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "investigation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = InvestigationForm(initial=master_view)    
        MSID= get_service_plan('view investigation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "investigation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'investigation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def investigation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            incident_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            investigator_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view investigation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "investigation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = InvestigationForm(initial=master_type_edit,incident_choice=incident_records,investigator_choice=investigator_records)

        MSID= get_service_plan('view investigation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update investigation')
            if MSID is None:
                print('MISID not found')
            form = InvestigationForm(request.POST,incident_choice=incident_records,investigator_choice=investigator_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['investigation_id'] = pk    
                cleaned_data['investigation_date'] = cleaned_data['investigation_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/investigation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "investigation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'investigation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def investigation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete investigation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "investigation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/investigation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def clientreview_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view milestone')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            milestone_records = response['data']
        else:
            print('Data not found in response')
        form=ClientReviewForm(milestone_choice=milestone_records)
        MSID= get_service_plan('view clientreview')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ClientReviewForm(request.POST,milestone_choice=milestone_records)
            if form.is_valid():
                MSID= get_service_plan('create clientreview')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clientreview')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'clientreview.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientreview_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view clientreview')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "clientreview_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ClientReviewForm(initial=master_view)    
        MSID= get_service_plan('view clientreview')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "clientreview_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'clientreview_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientreview_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view milestone')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            milestone_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view clientreview')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "clientreview_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ClientReviewForm(initial=master_type_edit,milestone_choice=milestone_records)

        MSID= get_service_plan('view clientreview')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update clientreview')
            if MSID is None:
                print('MISID not found')
            form = ClientReviewForm(request.POST,milestone_choice=milestone_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['clientreview_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clientreview')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "clientreview_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'clientreview_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clientreview_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete clientreview')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "clientreview_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/clientreview')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def scheduleadjustment_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view milestone')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            milestone_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            adjusted_by_records = response['data']
        else:
            print('Data not found in response')
        form=ScheduleAdjustmentForm(project_choice=project_records,milestone_choice=milestone_records,adjusted_by_choice=adjusted_by_records)
        MSID= get_service_plan('view scheduleadjustment')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ScheduleAdjustmentForm(request.POST,project_choice=project_records,milestone_choice=milestone_records,adjusted_by_choice=adjusted_by_records)
            if form.is_valid():
                MSID= get_service_plan('create scheduleadjustment')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['adjustment_date'] = cleaned_data['adjustment_date'].strftime('%Y-%m-%d')
                cleaned_data['new_date'] = cleaned_data['new_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/scheduleadjustment')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'scheduleadjustment.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def scheduleadjustment_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view scheduleadjustment')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "scheduleadjustment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ScheduleAdjustmentForm(initial=master_view)    
        MSID= get_service_plan('view scheduleadjustment')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "scheduleadjustment_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'scheduleadjustment_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def scheduleadjustment_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view milestone')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            milestone_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            adjusted_by_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view scheduleadjustment')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "scheduleadjustment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ScheduleAdjustmentForm(initial=master_type_edit,project_choice=project_records,milestone_choice=milestone_records,adjusted_by_choice=adjusted_by_records)

        MSID= get_service_plan('view scheduleadjustment')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update scheduleadjustment')
            if MSID is None:
                print('MISID not found')
            form = ScheduleAdjustmentForm(request.POST,project_choice=project_records,milestone_choice=milestone_records,adjusted_by_choice=adjusted_by_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['scheduleadjustment_id'] = pk    
                cleaned_data['adjustment_date'] = cleaned_data['adjustment_date'].strftime('%Y-%m-%d')
                cleaned_data['new_date'] = cleaned_data['new_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/scheduleadjustment')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "scheduleadjustment_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'scheduleadjustment_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def scheduleadjustment_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete scheduleadjustment')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "scheduleadjustment_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/scheduleadjustment')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def task_create(request):
    # try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view milestone')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     milestone_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view taskdurationestimation')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        # if 'data' in response:
        #     duration_estimation_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view taskpriority')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     priority_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view taskcategory')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     category_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view team')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     assigned_team_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     assigned_individuals_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view individual')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     task_owner_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=TaskForm(milestone_choice=milestone_records,duration_estimation_choice=duration_estimation_records,priority_choice=priority_records,category_choice=category_records,assigned_team_choice=assigned_team_records,assigned_individuals_choice=assigned_individuals_records,task_owner_choice=task_owner_records)
        # MSID= get_service_plan('view task')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = TaskForm()
        # if request.method == "POST":
        #     form = TaskForm(request.POST,milestone_choice=milestone_records,duration_estimation_choice=duration_estimation_records,priority_choice=priority_records,category_choice=category_records,assigned_team_choice=assigned_team_records,assigned_individuals_choice=assigned_individuals_records,task_owner_choice=task_owner_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create task')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
        #         cleaned_data['start_date'] = cleaned_data['start_date'].strftime('%Y-%m-%d')
        #         cleaned_data['end_date'] = cleaned_data['end_date'].strftime('%Y-%m-%d')
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/task')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'task.html',context)
    # except Exception as error:
    #     return render(request, "error.html", {"error": error})    

def task_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view task')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "task_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TaskForm(initial=master_view)    
        MSID= get_service_plan('view task')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "task_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'task_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def task_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view milestone')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            milestone_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view taskdurationestimation')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            duration_estimation_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view taskpriority')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            priority_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view taskcategory')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            category_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view team')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            assigned_team_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            assigned_individuals_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view individual')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_owner_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view task')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "task_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TaskForm(initial=master_type_edit,milestone_choice=milestone_records,duration_estimation_choice=duration_estimation_records,priority_choice=priority_records,category_choice=category_records,assigned_team_choice=assigned_team_records,assigned_individuals_choice=assigned_individuals_records,task_owner_choice=task_owner_records)

        MSID= get_service_plan('view task')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update task')
            if MSID is None:
                print('MISID not found')
            form = TaskForm(request.POST,milestone_choice=milestone_records,duration_estimation_choice=duration_estimation_records,priority_choice=priority_records,category_choice=category_records,assigned_team_choice=assigned_team_records,assigned_individuals_choice=assigned_individuals_records,task_owner_choice=task_owner_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['task_id'] = pk    
                cleaned_data['start_date'] = cleaned_data['start_date'].strftime('%Y-%m-%d')
                cleaned_data['end_date'] = cleaned_data['end_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/task')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "task_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'task_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def task_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete task')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "task_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/task')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def siteinspection_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            inspector_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            punch_list_items_records = response['data']
        else:
            print('Data not found in response')
        form=SiteInspectionForm(project_choice=project_records,inspector_choice=inspector_records,punch_list_items_choice=punch_list_items_records)
        MSID= get_service_plan('view siteinspection')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = SiteInspectionForm(request.POST,project_choice=project_records,inspector_choice=inspector_records,punch_list_items_choice=punch_list_items_records)
            if form.is_valid():
                MSID= get_service_plan('create siteinspection')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['inspection_date'] = cleaned_data['inspection_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/siteinspection')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'siteinspection.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def siteinspection_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view siteinspection')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "siteinspection_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = SiteInspectionForm(initial=master_view)    
        MSID= get_service_plan('view siteinspection')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "siteinspection_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'siteinspection_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def siteinspection_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            inspector_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            punch_list_items_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view siteinspection')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "siteinspection_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = SiteInspectionForm(initial=master_type_edit,project_choice=project_records,inspector_choice=inspector_records,punch_list_items_choice=punch_list_items_records)

        MSID= get_service_plan('view siteinspection')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update siteinspection')
            if MSID is None:
                print('MISID not found')
            form = SiteInspectionForm(request.POST,project_choice=project_records,inspector_choice=inspector_records,punch_list_items_choice=punch_list_items_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['siteinspection_id'] = pk    
                cleaned_data['inspection_date'] = cleaned_data['inspection_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/siteinspection')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "siteinspection_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'siteinspection_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def siteinspection_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete siteinspection')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "siteinspection_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/siteinspection')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def machinery_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view resourceplanning')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            resource_planning_records = response['data']
        else:
            print('Data not found in response')
        form=MachineryForm(resource_planning_choice=resource_planning_records)
        MSID= get_service_plan('view machinery')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = MachineryForm(request.POST,resource_planning_choice=resource_planning_records)
            if form.is_valid():
                MSID= get_service_plan('create machinery')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/machinery')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'machinery.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def machinery_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view machinery')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "machinery_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = MachineryForm(initial=master_view)    
        MSID= get_service_plan('view machinery')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "machinery_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'machinery_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def machinery_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view resourceplanning')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            resource_planning_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view machinery')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "machinery_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = MachineryForm(initial=master_type_edit,resource_planning_choice=resource_planning_records)

        MSID= get_service_plan('view machinery')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update machinery')
            if MSID is None:
                print('MISID not found')
            form = MachineryForm(request.POST,resource_planning_choice=resource_planning_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['machinery_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/machinery')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "machinery_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'machinery_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def machinery_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete machinery')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "machinery_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/machinery')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def material_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view resourceplanning')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            resource_planning_records = response['data']
        else:
            print('Data not found in response')
        form=MaterialForm(resource_planning_choice=resource_planning_records)
        MSID= get_service_plan('view material')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = MaterialForm(request.POST,resource_planning_choice=resource_planning_records)
            if form.is_valid():
                MSID= get_service_plan('create material')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/material')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'material.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def material_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view material')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "material_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = MaterialForm(initial=master_view)    
        MSID= get_service_plan('view material')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "material_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'material_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def material_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view resourceplanning')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            resource_planning_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view material')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "material_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = MaterialForm(initial=master_type_edit,resource_planning_choice=resource_planning_records)

        MSID= get_service_plan('view material')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update material')
            if MSID is None:
                print('MISID not found')
            form = MaterialForm(request.POST,resource_planning_choice=resource_planning_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['material_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/material')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "material_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'material_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def material_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete material')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "material_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/material')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def mitigationstrategy_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view risk')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            risk_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view riskowner')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            mitigation_owner_records = response['data']
        else:
            print('Data not found in response')
        form=MitigationStrategyForm(risk_choice=risk_records,mitigation_owner_choice=mitigation_owner_records)
        MSID= get_service_plan('view mitigationstrategy')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = MitigationStrategyForm(request.POST,risk_choice=risk_records,mitigation_owner_choice=mitigation_owner_records)
            if form.is_valid():
                MSID= get_service_plan('create mitigationstrategy')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['start_date'] = cleaned_data['start_date'].strftime('%Y-%m-%d')
                cleaned_data['end_date'] = cleaned_data['end_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/mitigationstrategy')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'mitigationstrategy.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def mitigationstrategy_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view mitigationstrategy')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "mitigationstrategy_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = MitigationStrategyForm(initial=master_view)    
        MSID= get_service_plan('view mitigationstrategy')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "mitigationstrategy_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'mitigationstrategy_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def mitigationstrategy_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view risk')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            risk_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view riskowner')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            mitigation_owner_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view mitigationstrategy')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "mitigationstrategy_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = MitigationStrategyForm(initial=master_type_edit,risk_choice=risk_records,mitigation_owner_choice=mitigation_owner_records)

        MSID= get_service_plan('view mitigationstrategy')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update mitigationstrategy')
            if MSID is None:
                print('MISID not found')
            form = MitigationStrategyForm(request.POST,risk_choice=risk_records,mitigation_owner_choice=mitigation_owner_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['mitigationstrategy_id'] = pk    
                cleaned_data['start_date'] = cleaned_data['start_date'].strftime('%Y-%m-%d')
                cleaned_data['end_date'] = cleaned_data['end_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/mitigationstrategy')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "mitigationstrategy_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'mitigationstrategy_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def mitigationstrategy_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete mitigationstrategy')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "mitigationstrategy_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/mitigationstrategy')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def riskassessment_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view project')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     project_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     risk_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=RiskAssessmentForm(project_choice=project_records,risk_choice=risk_records)
        # MSID= get_service_plan('view riskassessment')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = RiskAssessmentForm()
        # if request.method == "POST":
        #     form = RiskAssessmentForm(request.POST,project_choice=project_records,risk_choice=risk_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create riskassessment')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/riskassessment')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'riskassessment.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskassessment_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view riskassessment')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "riskassessment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = RiskAssessmentForm(initial=master_view)    
        MSID= get_service_plan('view riskassessment')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "riskassessment_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'riskassessment_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskassessment_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            risk_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view riskassessment')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "riskassessment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = RiskAssessmentForm(initial=master_type_edit,project_choice=project_records,risk_choice=risk_records)

        MSID= get_service_plan('view riskassessment')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update riskassessment')
            if MSID is None:
                print('MISID not found')
            form = RiskAssessmentForm(request.POST,project_choice=project_records,risk_choice=risk_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['riskassessment_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/riskassessment')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "riskassessment_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'riskassessment_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskassessment_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete riskassessment')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "riskassessment_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/riskassessment')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def riskreview_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view risk')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            risk_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view riskowner')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            reviewed_by_records = response['data']
        else:
            print('Data not found in response')
        form=RiskReviewForm(risk_choice=risk_records,reviewed_by_choice=reviewed_by_records)
        MSID= get_service_plan('view riskreview')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = RiskReviewForm(request.POST,risk_choice=risk_records,reviewed_by_choice=reviewed_by_records)
            if form.is_valid():
                MSID= get_service_plan('create riskreview')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['review_date'] = cleaned_data['review_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/riskreview')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'riskreview.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskreview_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view riskreview')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "riskreview_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = RiskReviewForm(initial=master_view)    
        MSID= get_service_plan('view riskreview')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "riskreview_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'riskreview_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskreview_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view risk')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            risk_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view riskowner')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            reviewed_by_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view riskreview')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "riskreview_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = RiskReviewForm(initial=master_type_edit,risk_choice=risk_records,reviewed_by_choice=reviewed_by_records)

        MSID= get_service_plan('view riskreview')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update riskreview')
            if MSID is None:
                print('MISID not found')
            form = RiskReviewForm(request.POST,risk_choice=risk_records,reviewed_by_choice=reviewed_by_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['riskreview_id'] = pk    
                cleaned_data['review_date'] = cleaned_data['review_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/riskreview')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "riskreview_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'riskreview_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskreview_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete riskreview')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "riskreview_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/riskreview')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def delaynotification_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view stakeholder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            stakeholder_records = response['data']
        else:
            print('Data not found in response')
        form=DelayNotificationForm(project_choice=project_records,stakeholder_choice=stakeholder_records)
        MSID= get_service_plan('view delaynotification')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = DelayNotificationForm(request.POST,project_choice=project_records,stakeholder_choice=stakeholder_records)
            if form.is_valid():
                MSID= get_service_plan('create delaynotification')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['notification_date'] = cleaned_data['notification_date'].strftime('%Y-%m-%d')
                cleaned_data['updated_timeline'] = cleaned_data['updated_timeline'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/delaynotification')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'delaynotification.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def delaynotification_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view delaynotification')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "delaynotification_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = DelayNotificationForm(initial=master_view)    
        MSID= get_service_plan('view delaynotification')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "delaynotification_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'delaynotification_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def delaynotification_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view stakeholder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            stakeholder_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view delaynotification')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "delaynotification_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = DelayNotificationForm(initial=master_type_edit,project_choice=project_records,stakeholder_choice=stakeholder_records)

        MSID= get_service_plan('view delaynotification')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update delaynotification')
            if MSID is None:
                print('MISID not found')
            form = DelayNotificationForm(request.POST,project_choice=project_records,stakeholder_choice=stakeholder_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['delaynotification_id'] = pk    
                cleaned_data['notification_date'] = cleaned_data['notification_date'].strftime('%Y-%m-%d')
                cleaned_data['updated_timeline'] = cleaned_data['updated_timeline'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/delaynotification')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "delaynotification_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'delaynotification_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def delaynotification_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete delaynotification')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "delaynotification_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/delaynotification')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def stakeholderinput_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view procurementneed')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            procurement_need_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view stakeholder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            stakeholder_records = response['data']
        else:
            print('Data not found in response')
        form=StakeholderInputForm(procurement_need_choice=procurement_need_records,stakeholder_choice=stakeholder_records)
        MSID= get_service_plan('view stakeholderinput')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = StakeholderInputForm(request.POST,procurement_need_choice=procurement_need_records,stakeholder_choice=stakeholder_records)
            if form.is_valid():
                MSID= get_service_plan('create stakeholderinput')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/stakeholderinput')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'stakeholderinput.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stakeholderinput_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view stakeholderinput')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "stakeholderinput_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = StakeholderInputForm(initial=master_view)    
        MSID= get_service_plan('view stakeholderinput')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "stakeholderinput_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'stakeholderinput_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stakeholderinput_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view procurementneed')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            procurement_need_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view stakeholder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            stakeholder_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view stakeholderinput')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "stakeholderinput_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = StakeholderInputForm(initial=master_type_edit,procurement_need_choice=procurement_need_records,stakeholder_choice=stakeholder_records)

        MSID= get_service_plan('view stakeholderinput')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update stakeholderinput')
            if MSID is None:
                print('MISID not found')
            form = StakeholderInputForm(request.POST,procurement_need_choice=procurement_need_records,stakeholder_choice=stakeholder_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['stakeholderinput_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/stakeholderinput')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "stakeholderinput_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'stakeholderinput_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stakeholderinput_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete stakeholderinput')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "stakeholderinput_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/stakeholderinput')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def tenderdocument_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view stakeholder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            prepared_by_records = response['data']
        else:
            print('Data not found in response')
        form=TenderDocumentForm(prepared_by_choice=prepared_by_records)
        MSID= get_service_plan('view tenderdocument')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = TenderDocumentForm(request.POST,prepared_by_choice=prepared_by_records)
            if form.is_valid():
                MSID= get_service_plan('create tenderdocument')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['issue_date'] = cleaned_data['issue_date'].strftime('%Y-%m-%d')
                cleaned_data['closing_date'] = cleaned_data['closing_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/tenderdocument')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'tenderdocument.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def tenderdocument_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view tenderdocument')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "tenderdocument_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TenderDocumentForm(initial=master_view)    
        MSID= get_service_plan('view tenderdocument')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "tenderdocument_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'tenderdocument_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def tenderdocument_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view stakeholder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            prepared_by_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view tenderdocument')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "tenderdocument_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TenderDocumentForm(initial=master_type_edit,prepared_by_choice=prepared_by_records)

        MSID= get_service_plan('view tenderdocument')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update tenderdocument')
            if MSID is None:
                print('MISID not found')
            form = TenderDocumentForm(request.POST,prepared_by_choice=prepared_by_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['tenderdocument_id'] = pk    
                cleaned_data['issue_date'] = cleaned_data['issue_date'].strftime('%Y-%m-%d')
                cleaned_data['closing_date'] = cleaned_data['closing_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/tenderdocument')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "tenderdocument_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'tenderdocument_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def tenderdocument_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete tenderdocument')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "tenderdocument_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/tenderdocument')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def issue_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view teammember')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            assigned_to_records = response['data']
        else:
            print('Data not found in response')
        form=IssueForm(project_choice=project_records,assigned_to_choice=assigned_to_records)
        MSID= get_service_plan('view issue')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = IssueForm(request.POST,project_choice=project_records,assigned_to_choice=assigned_to_records)
            if form.is_valid():
                MSID= get_service_plan('create issue')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/issue')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'issue.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def issue_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view issue')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "issue_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = IssueForm(initial=master_view)    
        MSID= get_service_plan('view issue')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "issue_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'issue_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def issue_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view teammember')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            assigned_to_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view issue')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "issue_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = IssueForm(initial=master_type_edit,project_choice=project_records,assigned_to_choice=assigned_to_records)

        MSID= get_service_plan('view issue')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update issue')
            if MSID is None:
                print('MISID not found')
            form = IssueForm(request.POST,project_choice=project_records,assigned_to_choice=assigned_to_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['issue_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/issue')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "issue_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'issue_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def issue_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete issue')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "issue_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/issue')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def rfprfqresponse_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            distribution_records = response['data']
        else:
            print('Data not found in response')
        form=RFPRFQResponseForm(distribution_choice=distribution_records)
        MSID= get_service_plan('view rfprfqresponse')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = RFPRFQResponseForm(request.POST,distribution_choice=distribution_records)
            if form.is_valid():
                MSID= get_service_plan('create rfprfqresponse')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/rfprfqresponse')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'rfprfqresponse.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def rfprfqresponse_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view rfprfqresponse')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "rfprfqresponse_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = RFPRFQResponseForm(initial=master_view)    
        MSID= get_service_plan('view rfprfqresponse')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "rfprfqresponse_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'rfprfqresponse_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def rfprfqresponse_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            distribution_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view rfprfqresponse')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "rfprfqresponse_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = RFPRFQResponseForm(initial=master_type_edit,distribution_choice=distribution_records)

        MSID= get_service_plan('view rfprfqresponse')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update rfprfqresponse')
            if MSID is None:
                print('MISID not found')
            form = RFPRFQResponseForm(request.POST,distribution_choice=distribution_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['rfprfqresponse_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/rfprfqresponse')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "rfprfqresponse_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'rfprfqresponse_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def rfprfqresponse_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete rfprfqresponse')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "rfprfqresponse_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/rfprfqresponse')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def clarificationresponse_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendorclarification')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            clarification_records = response['data']
        else:
            print('Data not found in response')
        form=ClarificationResponseForm(clarification_choice=clarification_records)
        MSID= get_service_plan('view clarificationresponse')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ClarificationResponseForm(request.POST,clarification_choice=clarification_records)
            if form.is_valid():
                MSID= get_service_plan('create clarificationresponse')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clarificationresponse')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'clarificationresponse.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clarificationresponse_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view clarificationresponse')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "clarificationresponse_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ClarificationResponseForm(initial=master_view)    
        MSID= get_service_plan('view clarificationresponse')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "clarificationresponse_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'clarificationresponse_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clarificationresponse_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendorclarification')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            clarification_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view clarificationresponse')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "clarificationresponse_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ClarificationResponseForm(initial=master_type_edit,clarification_choice=clarification_records)

        MSID= get_service_plan('view clarificationresponse')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update clarificationresponse')
            if MSID is None:
                print('MISID not found')
            form = ClarificationResponseForm(request.POST,clarification_choice=clarification_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['clarificationresponse_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/clarificationresponse')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "clarificationresponse_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'clarificationresponse_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def clarificationresponse_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete clarificationresponse')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "clarificationresponse_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/clarificationresponse')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def finalvendorselection_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendorproposal')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_proposal_records = response['data']
        else:
            print('Data not found in response')
        form=FinalVendorSelectionForm(vendor_proposal_choice=vendor_proposal_records)
        MSID= get_service_plan('view finalvendorselection')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = FinalVendorSelectionForm(request.POST,vendor_proposal_choice=vendor_proposal_records)
            if form.is_valid():
                MSID= get_service_plan('create finalvendorselection')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['selection_date'] = cleaned_data['selection_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/finalvendorselection')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'finalvendorselection.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def finalvendorselection_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view finalvendorselection')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "finalvendorselection_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = FinalVendorSelectionForm(initial=master_view)    
        MSID= get_service_plan('view finalvendorselection')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "finalvendorselection_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'finalvendorselection_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def finalvendorselection_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendorproposal')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_proposal_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view finalvendorselection')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "finalvendorselection_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = FinalVendorSelectionForm(initial=master_type_edit,vendor_proposal_choice=vendor_proposal_records)

        MSID= get_service_plan('view finalvendorselection')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update finalvendorselection')
            if MSID is None:
                print('MISID not found')
            form = FinalVendorSelectionForm(request.POST,vendor_proposal_choice=vendor_proposal_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['finalvendorselection_id'] = pk    
                cleaned_data['selection_date'] = cleaned_data['selection_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/finalvendorselection')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "finalvendorselection_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'finalvendorselection_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def finalvendorselection_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete finalvendorselection')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "finalvendorselection_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/finalvendorselection')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def financialevaluation_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     proposal_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=FinancialEvaluationForm(proposal_choice=proposal_records)
        # MSID= get_service_plan('view financialevaluation')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = FinancialEvaluationForm()
        # if request.method == "POST":
        #     form = FinancialEvaluationForm(request.POST,proposal_choice=proposal_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create financialevaluation')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/financialevaluation')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'financialevaluation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def financialevaluation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view financialevaluation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "financialevaluation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = FinancialEvaluationForm(initial=master_view)    
        MSID= get_service_plan('view financialevaluation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "financialevaluation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'financialevaluation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def financialevaluation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            proposal_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view financialevaluation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "financialevaluation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = FinancialEvaluationForm(initial=master_type_edit,proposal_choice=proposal_records)

        MSID= get_service_plan('view financialevaluation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update financialevaluation')
            if MSID is None:
                print('MISID not found')
            form = FinancialEvaluationForm(request.POST,proposal_choice=proposal_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['financialevaluation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/financialevaluation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "financialevaluation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'financialevaluation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def financialevaluation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete financialevaluation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "financialevaluation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/financialevaluation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def negotiationstakeholder_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view team')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            team_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view stakeholder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            stakeholder_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view vendorproposal')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_proposal_records = response['data']
        else:
            print('Data not found in response')
        form=NegotiationStakeholderForm(team_choice=team_records,stakeholder_choice=stakeholder_records,vendor_proposal_choice=vendor_proposal_records)
        MSID= get_service_plan('view negotiationstakeholder')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = NegotiationStakeholderForm(request.POST,team_choice=team_records,stakeholder_choice=stakeholder_records,vendor_proposal_choice=vendor_proposal_records)
            if form.is_valid():
                MSID= get_service_plan('create negotiationstakeholder')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/negotiationstakeholder')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'negotiationstakeholder.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def negotiationstakeholder_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view negotiationstakeholder')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "negotiationstakeholder_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = NegotiationStakeholderForm(initial=master_view)    
        MSID= get_service_plan('view negotiationstakeholder')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "negotiationstakeholder_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'negotiationstakeholder_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def negotiationstakeholder_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view team')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            team_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view stakeholder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            stakeholder_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view vendorproposal')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_proposal_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view negotiationstakeholder')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "negotiationstakeholder_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = NegotiationStakeholderForm(initial=master_type_edit,team_choice=team_records,stakeholder_choice=stakeholder_records,vendor_proposal_choice=vendor_proposal_records)

        MSID= get_service_plan('view negotiationstakeholder')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update negotiationstakeholder')
            if MSID is None:
                print('MISID not found')
            form = NegotiationStakeholderForm(request.POST,team_choice=team_records,stakeholder_choice=stakeholder_records,vendor_proposal_choice=vendor_proposal_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['negotiationstakeholder_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/negotiationstakeholder')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "negotiationstakeholder_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'negotiationstakeholder_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def negotiationstakeholder_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete negotiationstakeholder')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "negotiationstakeholder_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/negotiationstakeholder')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def negotiationsummary_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     vendor_proposal_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=NegotiationSummaryForm(vendor_proposal_choice=vendor_proposal_records)
        # MSID= get_service_plan('view negotiationsummary')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = NegotiationSummaryForm()
        # if request.method == "POST":
        #     form = NegotiationSummaryForm(request.POST,vendor_proposal_choice=vendor_proposal_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create negotiationsummary')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/negotiationsummary')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'negotiationsummary.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def negotiationsummary_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view negotiationsummary')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "negotiationsummary_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = NegotiationSummaryForm(initial=master_view)    
        MSID= get_service_plan('view negotiationsummary')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "negotiationsummary_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'negotiationsummary_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def negotiationsummary_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_proposal_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view negotiationsummary')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "negotiationsummary_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = NegotiationSummaryForm(initial=master_type_edit,vendor_proposal_choice=vendor_proposal_records)

        MSID= get_service_plan('view negotiationsummary')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update negotiationsummary')
            if MSID is None:
                print('MISID not found')
            form = NegotiationSummaryForm(request.POST,vendor_proposal_choice=vendor_proposal_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['negotiationsummary_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/negotiationsummary')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "negotiationsummary_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'negotiationsummary_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def negotiationsummary_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete negotiationsummary')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "negotiationsummary_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/negotiationsummary')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def negotiationterm_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendorproposal')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_proposal_records = response['data']
        else:
            print('Data not found in response')
        form=NegotiationTermForm(vendor_proposal_choice=vendor_proposal_records)
        MSID= get_service_plan('view negotiationterm')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = NegotiationTermForm(request.POST,vendor_proposal_choice=vendor_proposal_records)
            if form.is_valid():
                MSID= get_service_plan('create negotiationterm')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/negotiationterm')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'negotiationterm.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def negotiationterm_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view negotiationterm')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "negotiationterm_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = NegotiationTermForm(initial=master_view)    
        MSID= get_service_plan('view negotiationterm')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "negotiationterm_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'negotiationterm_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def negotiationterm_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendorproposal')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            vendor_proposal_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view negotiationterm')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "negotiationterm_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = NegotiationTermForm(initial=master_type_edit,vendor_proposal_choice=vendor_proposal_records)

        MSID= get_service_plan('view negotiationterm')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update negotiationterm')
            if MSID is None:
                print('MISID not found')
            form = NegotiationTermForm(request.POST,vendor_proposal_choice=vendor_proposal_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['negotiationterm_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/negotiationterm')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "negotiationterm_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'negotiationterm_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def negotiationterm_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete negotiationterm')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "negotiationterm_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/negotiationterm')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def proposalcompliance_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendorproposal')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            proposal_records = response['data']
        else:
            print('Data not found in response')
        form=ProposalComplianceForm(proposal_choice=proposal_records)
        MSID= get_service_plan('view proposalcompliance')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProposalComplianceForm(request.POST,proposal_choice=proposal_records)
            if form.is_valid():
                MSID= get_service_plan('create proposalcompliance')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/proposalcompliance')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'proposalcompliance.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposalcompliance_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view proposalcompliance')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "proposalcompliance_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProposalComplianceForm(initial=master_view)    
        MSID= get_service_plan('view proposalcompliance')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "proposalcompliance_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'proposalcompliance_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposalcompliance_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendorproposal')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            proposal_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view proposalcompliance')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "proposalcompliance_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProposalComplianceForm(initial=master_type_edit,proposal_choice=proposal_records)

        MSID= get_service_plan('view proposalcompliance')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update proposalcompliance')
            if MSID is None:
                print('MISID not found')
            form = ProposalComplianceForm(request.POST,proposal_choice=proposal_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['proposalcompliance_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/proposalcompliance')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "proposalcompliance_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'proposalcompliance_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposalcompliance_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete proposalcompliance')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "proposalcompliance_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/proposalcompliance')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def proposalevaluation_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     proposal_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=ProposalEvaluationForm(proposal_choice=proposal_records)
        # MSID= get_service_plan('view proposalevaluation')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form=ProposalEvaluationForm()
        # if request.method == "POST":
        #     form = ProposalEvaluationForm(request.POST,proposal_choice=proposal_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create proposalevaluation')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/proposalevaluation')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'proposalevaluation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposalevaluation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view proposalevaluation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "proposalevaluation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProposalEvaluationForm(initial=master_view)    
        MSID= get_service_plan('view proposalevaluation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "proposalevaluation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'proposalevaluation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposalevaluation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            proposal_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view proposalevaluation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "proposalevaluation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProposalEvaluationForm(initial=master_type_edit,proposal_choice=proposal_records)

        MSID= get_service_plan('view proposalevaluation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update proposalevaluation')
            if MSID is None:
                print('MISID not found')
            form = ProposalEvaluationForm(request.POST,proposal_choice=proposal_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['proposalevaluation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/proposalevaluation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "proposalevaluation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'proposalevaluation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposalevaluation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete proposalevaluation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "proposalevaluation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/proposalevaluation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def proposalscoring_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendorproposal')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            proposal_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view scoringcriteria')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            criteria_records = response['data']
        else:
            print('Data not found in response')
        form=ProposalScoringForm(proposal_choice=proposal_records,criteria_choice=criteria_records)
        MSID= get_service_plan('view proposalscoring')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProposalScoringForm(request.POST,proposal_choice=proposal_records,criteria_choice=criteria_records)
            if form.is_valid():
                MSID= get_service_plan('create proposalscoring')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/proposalscoring')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'proposalscoring.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposalscoring_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view proposalscoring')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "proposalscoring_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProposalScoringForm(initial=master_view)    
        MSID= get_service_plan('view proposalscoring')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "proposalscoring_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'proposalscoring_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposalscoring_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view vendorproposal')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            proposal_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view scoringcriteria')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            criteria_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view proposalscoring')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "proposalscoring_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProposalScoringForm(initial=master_type_edit,proposal_choice=proposal_records,criteria_choice=criteria_records)

        MSID= get_service_plan('view proposalscoring')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update proposalscoring')
            if MSID is None:
                print('MISID not found')
            form = ProposalScoringForm(request.POST,proposal_choice=proposal_records,criteria_choice=criteria_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['proposalscoring_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/proposalscoring')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "proposalscoring_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'proposalscoring_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposalscoring_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete proposalscoring')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "proposalscoring_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/proposalscoring')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def riskevaluation_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     proposal_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=RiskEvaluationForm(proposal_choice=proposal_records)
        # MSID= get_service_plan('view riskevaluation')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']

        form=RiskEvaluationForm()

        # if request.method == "POST":
        #     form = RiskEvaluationForm(request.POST,proposal_choice=proposal_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create riskevaluation')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/riskevaluation')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'riskevaluation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskevaluation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view riskevaluation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "riskevaluation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = RiskEvaluationForm(initial=master_view)    
        MSID= get_service_plan('view riskevaluation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "riskevaluation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'riskevaluation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskevaluation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            proposal_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view riskevaluation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "riskevaluation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = RiskEvaluationForm(initial=master_type_edit,proposal_choice=proposal_records)

        MSID= get_service_plan('view riskevaluation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update riskevaluation')
            if MSID is None:
                print('MISID not found')
            form = RiskEvaluationForm(request.POST,proposal_choice=proposal_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['riskevaluation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/riskevaluation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "riskevaluation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'riskevaluation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def riskevaluation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete riskevaluation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "riskevaluation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/riskevaluation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def technicalevaluation_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     proposal_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=TechnicalEvaluationForm(proposal_choice=proposal_records)
        # MSID= get_service_plan('view technicalevaluation')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = TechnicalEvaluationForm()
        # if request.method == "POST":
        #     form = TechnicalEvaluationForm(request.POST,proposal_choice=proposal_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create technicalevaluation')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/technicalevaluation')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'technicalevaluation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def technicalevaluation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view technicalevaluation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "technicalevaluation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TechnicalEvaluationForm(initial=master_view)    
        MSID= get_service_plan('view technicalevaluation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "technicalevaluation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'technicalevaluation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def technicalevaluation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            proposal_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view technicalevaluation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "technicalevaluation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TechnicalEvaluationForm(initial=master_type_edit,proposal_choice=proposal_records)

        MSID= get_service_plan('view technicalevaluation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update technicalevaluation')
            if MSID is None:
                print('MISID not found')
            form = TechnicalEvaluationForm(request.POST,proposal_choice=proposal_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['technicalevaluation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/technicalevaluation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "technicalevaluation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'technicalevaluation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def technicalevaluation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete technicalevaluation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "technicalevaluation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/technicalevaluation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def proposal_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view opportunity')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            opportunity_records = response['data']
        else:
            print('Data not found in response')
        form=ProposalForm(opportunity_choice=opportunity_records)
        MSID= get_service_plan('view proposal')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProposalForm(request.POST,opportunity_choice=opportunity_records)
            if form.is_valid():
                MSID= get_service_plan('create proposal')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/proposal')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'proposal.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposal_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view proposal')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "proposal_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProposalForm(initial=master_view)    
        MSID= get_service_plan('view proposal')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "proposal_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'proposal_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposal_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view opportunity')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            opportunity_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view proposal')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "proposal_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProposalForm(initial=master_type_edit,opportunity_choice=opportunity_records)

        MSID= get_service_plan('view proposal')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update proposal')
            if MSID is None:
                print('MISID not found')
            form = ProposalForm(request.POST,opportunity_choice=opportunity_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['proposal_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/proposal')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "proposal_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'proposal_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def proposal_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete proposal')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "proposal_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/proposal')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def auditlog_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view contract')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view changeorder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            change_order_records = response['data']
        else:
            print('Data not found in response')
        form=AuditLogForm(contract_choice=contract_records,change_order_choice=change_order_records)
        MSID= get_service_plan('view auditlog')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = AuditLogForm(request.POST,contract_choice=contract_records,change_order_choice=change_order_records)
            if form.is_valid():
                MSID= get_service_plan('create auditlog')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/auditlog')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'auditlog.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def auditlog_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view auditlog')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "auditlog_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = AuditLogForm(initial=master_view)    
        MSID= get_service_plan('view auditlog')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "auditlog_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'auditlog_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def auditlog_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view contract')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view changeorder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            change_order_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view auditlog')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "auditlog_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = AuditLogForm(initial=master_type_edit,contract_choice=contract_records,change_order_choice=change_order_records)

        MSID= get_service_plan('view auditlog')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update auditlog')
            if MSID is None:
                print('MISID not found')
            form = AuditLogForm(request.POST,contract_choice=contract_records,change_order_choice=change_order_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['auditlog_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/auditlog')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "auditlog_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'auditlog_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def auditlog_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete auditlog')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "auditlog_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/auditlog')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def changeorderapproval_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     change_order_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=ChangeOrderApprovalForm(change_order_choice=change_order_records)
        # MSID= get_service_plan('view changeorderapproval')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = ChangeOrderApprovalForm()
        # if request.method == "POST":
        #     form = ChangeOrderApprovalForm(request.POST,change_order_choice=change_order_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create changeorderapproval')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
        #         cleaned_data['approval_date'] = cleaned_data['approval_date'].strftime('%Y-%m-%d')
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/changeorderapproval')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'changeorderapproval.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def changeorderapproval_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view changeorderapproval')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "changeorderapproval_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ChangeOrderApprovalForm(initial=master_view)    
        MSID= get_service_plan('view changeorderapproval')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "changeorderapproval_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'changeorderapproval_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def changeorderapproval_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            change_order_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view changeorderapproval')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "changeorderapproval_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ChangeOrderApprovalForm(initial=master_type_edit,change_order_choice=change_order_records)

        MSID= get_service_plan('view changeorderapproval')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update changeorderapproval')
            if MSID is None:
                print('MISID not found')
            form = ChangeOrderApprovalForm(request.POST,change_order_choice=change_order_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['changeorderapproval_id'] = pk    
                cleaned_data['approval_date'] = cleaned_data['approval_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/changeorderapproval')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "changeorderapproval_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'changeorderapproval_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def changeorderapproval_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete changeorderapproval')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "changeorderapproval_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/changeorderapproval')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def changeorderimplementation_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     change_order_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=ChangeOrderImplementationForm(change_order_choice=change_order_records)
        # MSID= get_service_plan('view changeorderimplementation')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = ChangeOrderImplementationForm()
        # if request.method == "POST":
        #     form = ChangeOrderImplementationForm(request.POST,change_order_choice=change_order_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create changeorderimplementation')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
        #         cleaned_data['implementation_date'] = cleaned_data['implementation_date'].strftime('%Y-%m-%d')
        #         cleaned_data['new_deadline'] = cleaned_data['new_deadline'].strftime('%Y-%m-%d')
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/changeorderimplementation')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'changeorderimplementation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def changeorderimplementation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view changeorderimplementation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "changeorderimplementation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ChangeOrderImplementationForm(initial=master_view)    
        MSID= get_service_plan('view changeorderimplementation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "changeorderimplementation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'changeorderimplementation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def changeorderimplementation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            change_order_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view changeorderimplementation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "changeorderimplementation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ChangeOrderImplementationForm(initial=master_type_edit,change_order_choice=change_order_records)

        MSID= get_service_plan('view changeorderimplementation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update changeorderimplementation')
            if MSID is None:
                print('MISID not found')
            form = ChangeOrderImplementationForm(request.POST,change_order_choice=change_order_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['changeorderimplementation_id'] = pk    
                cleaned_data['implementation_date'] = cleaned_data['implementation_date'].strftime('%Y-%m-%d')
                cleaned_data['new_deadline'] = cleaned_data['new_deadline'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/changeorderimplementation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "changeorderimplementation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'changeorderimplementation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def changeorderimplementation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete changeorderimplementation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "changeorderimplementation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/changeorderimplementation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def document_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view contract')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view changeorder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            change_order_records = response['data']
        else:
            print('Data not found in response')
        form=DocumentForm(contract_choice=contract_records,change_order_choice=change_order_records)
        MSID= get_service_plan('view document')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = DocumentForm(request.POST,contract_choice=contract_records,change_order_choice=change_order_records)
            if form.is_valid():
                MSID= get_service_plan('create document')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['upload_date'] = cleaned_data['upload_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/document')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'document.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def document_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view document')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "document_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = DocumentForm(initial=master_view)    
        MSID= get_service_plan('view document')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "document_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'document_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def document_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view contract')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view changeorder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            change_order_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view document')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "document_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = DocumentForm(initial=master_type_edit,contract_choice=contract_records,change_order_choice=change_order_records)

        MSID= get_service_plan('view document')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update document')
            if MSID is None:
                print('MISID not found')
            form = DocumentForm(request.POST,contract_choice=contract_records,change_order_choice=change_order_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['document_id'] = pk    
                cleaned_data['upload_date'] = cleaned_data['upload_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/document')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "document_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'document_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def document_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete document')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "document_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/document')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def invoice_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view purchaseorder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            purchase_order_records = response['data']
        else:
            print('Data not found in response')
        form=InvoiceForm(purchase_order_choice=purchase_order_records)
        MSID= get_service_plan('view invoice')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = InvoiceForm(request.POST,purchase_order_choice=purchase_order_records)
            if form.is_valid():
                MSID= get_service_plan('create invoice')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['invoice_date'] = cleaned_data['invoice_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/invoice')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'invoice.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def invoice_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view invoice')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "invoice_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = InvoiceForm(initial=master_view)    
        MSID= get_service_plan('view invoice')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "invoice_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'invoice_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def invoice_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view purchaseorder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            purchase_order_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view invoice')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "invoice_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = InvoiceForm(initial=master_type_edit,purchase_order_choice=purchase_order_records)

        MSID= get_service_plan('view invoice')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update invoice')
            if MSID is None:
                print('MISID not found')
            form = InvoiceForm(request.POST,purchase_order_choice=purchase_order_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['invoice_id'] = pk    
                cleaned_data['invoice_date'] = cleaned_data['invoice_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/invoice')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "invoice_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'invoice_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def invoice_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete invoice')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "invoice_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/invoice')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def shipment_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view purchaseorder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            purchase_order_records = response['data']
        else:
            print('Data not found in response')
        form=ShipmentForm(purchase_order_choice=purchase_order_records)
        MSID= get_service_plan('view shipment')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ShipmentForm(request.POST,purchase_order_choice=purchase_order_records)
            if form.is_valid():
                MSID= get_service_plan('create shipment')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/shipment')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'shipment.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def shipment_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view shipment')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "shipment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ShipmentForm(initial=master_view)    
        MSID= get_service_plan('view shipment')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "shipment_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'shipment_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def shipment_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view purchaseorder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            purchase_order_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view shipment')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "shipment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ShipmentForm(initial=master_type_edit,purchase_order_choice=purchase_order_records)

        MSID= get_service_plan('view shipment')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update shipment')
            if MSID is None:
                print('MISID not found')
            form = ShipmentForm(request.POST,purchase_order_choice=purchase_order_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['shipment_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/shipment')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "shipment_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'shipment_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def shipment_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete shipment')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "shipment_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/shipment')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def criticalpath_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
        form=CriticalPathForm(project_choice=project_records,task_choice=task_records)
        MSID= get_service_plan('view criticalpath')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = CriticalPathForm(request.POST,project_choice=project_records,task_choice=task_records)
            if form.is_valid():
                MSID= get_service_plan('create criticalpath')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/criticalpath')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'criticalpath.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def criticalpath_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view criticalpath')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "criticalpath_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = CriticalPathForm(initial=master_view)    
        MSID= get_service_plan('view criticalpath')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "criticalpath_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'criticalpath_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def criticalpath_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view criticalpath')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "criticalpath_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = CriticalPathForm(initial=master_type_edit,project_choice=project_records,task_choice=task_records)

        MSID= get_service_plan('view criticalpath')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update criticalpath')
            if MSID is None:
                print('MISID not found')
            form = CriticalPathForm(request.POST,project_choice=project_records,task_choice=task_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['criticalpath_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/criticalpath')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "criticalpath_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'criticalpath_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def criticalpath_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete criticalpath')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "criticalpath_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/criticalpath')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def dailyprogressreport_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view task')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     task_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view user')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     reported_by_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=DailyProgressReportForm(task_choice=task_records,reported_by_choice=reported_by_records)
        # MSID= get_service_plan('view dailyprogressreport')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = DailyProgressReportForm()
        # if request.method == "POST":
        #     form = DailyProgressReportForm(request.POST,task_choice=task_records,reported_by_choice=reported_by_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create dailyprogressreport')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
        #         cleaned_data['report_date'] = cleaned_data['report_date'].strftime('%Y-%m-%d')
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/dailyprogressreport')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'dailyprogressreport.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def dailyprogressreport_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view dailyprogressreport')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "dailyprogressreport_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = DailyProgressReportForm(initial=master_view)    
        MSID= get_service_plan('view dailyprogressreport')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "dailyprogressreport_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'dailyprogressreport_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def dailyprogressreport_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            reported_by_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view dailyprogressreport')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "dailyprogressreport_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = DailyProgressReportForm(initial=master_type_edit,task_choice=task_records,reported_by_choice=reported_by_records)

        MSID= get_service_plan('view dailyprogressreport')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update dailyprogressreport')
            if MSID is None:
                print('MISID not found')
            form = DailyProgressReportForm(request.POST,task_choice=task_records,reported_by_choice=reported_by_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['dailyprogressreport_id'] = pk    
                cleaned_data['report_date'] = cleaned_data['report_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/dailyprogressreport')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "dailyprogressreport_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'dailyprogressreport_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def dailyprogressreport_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete dailyprogressreport')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "dailyprogressreport_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/dailyprogressreport')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def delay_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view delaycause')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            cause_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            reported_by_records = response['data']
        else:
            print('Data not found in response')
        form=DelayForm(task_choice=task_records,cause_choice=cause_records,reported_by_choice=reported_by_records)
        MSID= get_service_plan('view delay')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = DelayForm(request.POST,task_choice=task_records,cause_choice=cause_records,reported_by_choice=reported_by_records)
            if form.is_valid():
                MSID= get_service_plan('create delay')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/delay')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'delay.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def delay_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view delay')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "delay_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = DelayForm(initial=master_view)    
        MSID= get_service_plan('view delay')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "delay_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'delay_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def delay_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view delaycause')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            cause_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            reported_by_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view delay')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "delay_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = DelayForm(initial=master_type_edit,task_choice=task_records,cause_choice=cause_records,reported_by_choice=reported_by_records)

        MSID= get_service_plan('view delay')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update delay')
            if MSID is None:
                print('MISID not found')
            form = DelayForm(request.POST,task_choice=task_records,cause_choice=cause_records,reported_by_choice=reported_by_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['delay_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/delay')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "delay_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'delay_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def delay_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete delay')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "delay_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/delay')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def performancereport_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view subcontractor')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     subcontractor_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view project')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     project_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view task')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     task_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=PerformanceReportForm(subcontractor_choice=subcontractor_records,project_choice=project_records,task_choice=task_records)
        # MSID= get_service_plan('view performancereport')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = PerformanceReportForm()
        # if request.method == "POST":
        #     form = PerformanceReportForm(request.POST,subcontractor_choice=subcontractor_records,project_choice=project_records,task_choice=task_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create performancereport')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
        #         cleaned_data['report_date'] = cleaned_data['report_date'].strftime('%Y-%m-%d')
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/performancereport')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'performancereport.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def performancereport_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view performancereport')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "performancereport_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = PerformanceReportForm(initial=master_view)    
        MSID= get_service_plan('view performancereport')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "performancereport_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'performancereport_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def performancereport_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view subcontractor')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            subcontractor_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view performancereport')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "performancereport_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = PerformanceReportForm(initial=master_type_edit,subcontractor_choice=subcontractor_records,project_choice=project_records,task_choice=task_records)

        MSID= get_service_plan('view performancereport')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update performancereport')
            if MSID is None:
                print('MISID not found')
            form = PerformanceReportForm(request.POST,subcontractor_choice=subcontractor_records,project_choice=project_records,task_choice=task_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['performancereport_id'] = pk    
                cleaned_data['report_date'] = cleaned_data['report_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/performancereport')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "performancereport_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'performancereport_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def performancereport_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete performancereport')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "performancereport_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/performancereport')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def photodocumentation_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view task')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     task_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=PhotoDocumentationForm(task_choice=task_records)
        # MSID= get_service_plan('view photodocumentation')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = PhotoDocumentationForm()
        # if request.method == "POST":
        #     form = PhotoDocumentationForm(request.POST,task_choice=task_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create photodocumentation')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/photodocumentation')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'photodocumentation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def photodocumentation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view photodocumentation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "photodocumentation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = PhotoDocumentationForm(initial=master_view)    
        MSID= get_service_plan('view photodocumentation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "photodocumentation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'photodocumentation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def photodocumentation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view photodocumentation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "photodocumentation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = PhotoDocumentationForm(initial=master_type_edit,task_choice=task_records)

        MSID= get_service_plan('view photodocumentation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update photodocumentation')
            if MSID is None:
                print('MISID not found')
            form = PhotoDocumentationForm(request.POST,task_choice=task_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['photodocumentation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/photodocumentation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "photodocumentation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'photodocumentation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def photodocumentation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete photodocumentation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "photodocumentation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/photodocumentation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def projectupdate_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
        form=ProjectUpdateForm(task_choice=task_records)
        MSID= get_service_plan('view projectupdate')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ProjectUpdateForm(request.POST,task_choice=task_records)
            if form.is_valid():
                MSID= get_service_plan('create projectupdate')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                cleaned_data['planned_start_date'] = cleaned_data['planned_start_date'].strftime('%Y-%m-%d')
                cleaned_data['actual_start_date'] = cleaned_data['actual_start_date'].strftime('%Y-%m-%d')
                cleaned_data['planned_end_date'] = cleaned_data['planned_end_date'].strftime('%Y-%m-%d')
                cleaned_data['actual_end_date'] = cleaned_data['actual_end_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectupdate')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'projectupdate.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectupdate_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view projectupdate')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "projectupdate_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ProjectUpdateForm(initial=master_view)    
        MSID= get_service_plan('view projectupdate')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "projectupdate_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'projectupdate_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectupdate_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view projectupdate')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "projectupdate_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ProjectUpdateForm(initial=master_type_edit,task_choice=task_records)

        MSID= get_service_plan('view projectupdate')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update projectupdate')
            if MSID is None:
                print('MISID not found')
            form = ProjectUpdateForm(request.POST,task_choice=task_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['projectupdate_id'] = pk    
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                cleaned_data['planned_start_date'] = cleaned_data['planned_start_date'].strftime('%Y-%m-%d')
                cleaned_data['actual_start_date'] = cleaned_data['actual_start_date'].strftime('%Y-%m-%d')
                cleaned_data['planned_end_date'] = cleaned_data['planned_end_date'].strftime('%Y-%m-%d')
                cleaned_data['actual_end_date'] = cleaned_data['actual_end_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/projectupdate')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "projectupdate_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'projectupdate_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def projectupdate_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete projectupdate')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "projectupdate_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/projectupdate')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def resourceadjustment_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view resource')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            resource_records = response['data']
        else:
            print('Data not found in response')
        form=ResourceAdjustmentForm(task_choice=task_records,resource_choice=resource_records)
        MSID= get_service_plan('view resourceadjustment')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ResourceAdjustmentForm(request.POST,task_choice=task_records,resource_choice=resource_records)
            if form.is_valid():
                MSID= get_service_plan('create resourceadjustment')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['adjustment_date'] = cleaned_data['adjustment_date'].strftime('%Y-%m-%d')
                cleaned_data['new_schedule'] = cleaned_data['new_schedule'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourceadjustment')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'resourceadjustment.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceadjustment_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view resourceadjustment')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "resourceadjustment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ResourceAdjustmentForm(initial=master_view)    
        MSID= get_service_plan('view resourceadjustment')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "resourceadjustment_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'resourceadjustment_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceadjustment_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view resource')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            resource_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view resourceadjustment')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "resourceadjustment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ResourceAdjustmentForm(initial=master_type_edit,task_choice=task_records,resource_choice=resource_records)

        MSID= get_service_plan('view resourceadjustment')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update resourceadjustment')
            if MSID is None:
                print('MISID not found')
            form = ResourceAdjustmentForm(request.POST,task_choice=task_records,resource_choice=resource_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['resourceadjustment_id'] = pk    
                cleaned_data['adjustment_date'] = cleaned_data['adjustment_date'].strftime('%Y-%m-%d')
                cleaned_data['new_schedule'] = cleaned_data['new_schedule'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourceadjustment')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "resourceadjustment_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'resourceadjustment_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceadjustment_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete resourceadjustment')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "resourceadjustment_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/resourceadjustment')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def resourceallocation_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            allocated_by_records = response['data']
        else:
            print('Data not found in response')
        form=ResourceAllocationForm(task_choice=task_records,allocated_by_choice=allocated_by_records)
        MSID= get_service_plan('view resourceallocation')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ResourceAllocationForm(request.POST,task_choice=task_records,allocated_by_choice=allocated_by_records)
            if form.is_valid():
                MSID= get_service_plan('create resourceallocation')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourceallocation')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'resourceallocation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceallocation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view resourceallocation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "resourceallocation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ResourceAllocationForm(initial=master_view)    
        MSID= get_service_plan('view resourceallocation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "resourceallocation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'resourceallocation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceallocation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            allocated_by_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view resourceallocation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "resourceallocation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ResourceAllocationForm(initial=master_type_edit,task_choice=task_records,allocated_by_choice=allocated_by_records)

        MSID= get_service_plan('view resourceallocation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update resourceallocation')
            if MSID is None:
                print('MISID not found')
            form = ResourceAllocationForm(request.POST,task_choice=task_records,allocated_by_choice=allocated_by_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['resourceallocation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourceallocation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "resourceallocation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'resourceallocation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceallocation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete resourceallocation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "resourceallocation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/resourceallocation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def taskdependency_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view task')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     task_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view task')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     dependent_task_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=TaskDependencyForm(task_choice=task_records,dependent_task_choice=dependent_task_records)
        # MSID= get_service_plan('view taskdependency')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = TaskDependencyForm()
        # if request.method == "POST":
        #     form = TaskDependencyForm(request.POST,task_choice=task_records,dependent_task_choice=dependent_task_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create taskdependency')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/taskdependency')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'taskdependency.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskdependency_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view taskdependency')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "taskdependency_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TaskDependencyForm(initial=master_view)    
        MSID= get_service_plan('view taskdependency')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "taskdependency_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'taskdependency_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskdependency_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            dependent_task_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view taskdependency')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "taskdependency_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TaskDependencyForm(initial=master_type_edit,task_choice=task_records,dependent_task_choice=dependent_task_records)

        MSID= get_service_plan('view taskdependency')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update taskdependency')
            if MSID is None:
                print('MISID not found')
            form = TaskDependencyForm(request.POST,task_choice=task_records,dependent_task_choice=dependent_task_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['taskdependency_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/taskdependency')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "taskdependency_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'taskdependency_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskdependency_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete taskdependency')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "taskdependency_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/taskdependency')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def taskresourceallocation_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view task')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     task_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view resource')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        form=TaskResourceAllocationForm()

        # Check if the response contains data
        # if 'data' in response:
        #     resource_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=TaskResourceAllocationForm(task_choice=task_records,resource_choice=resource_records)
        # MSID= get_service_plan('view taskresourceallocation')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']

        # if request.method == "POST":
        #     form = TaskResourceAllocationForm(request.POST,task_choice=task_records,resource_choice=resource_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create taskresourceallocation')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/taskresourceallocation')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'taskresourceallocation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskresourceallocation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view taskresourceallocation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "taskresourceallocation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TaskResourceAllocationForm(initial=master_view)    
        MSID= get_service_plan('view taskresourceallocation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "taskresourceallocation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'taskresourceallocation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskresourceallocation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view resource')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            resource_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view taskresourceallocation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "taskresourceallocation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TaskResourceAllocationForm(initial=master_type_edit,task_choice=task_records,resource_choice=resource_records)

        MSID= get_service_plan('view taskresourceallocation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update taskresourceallocation')
            if MSID is None:
                print('MISID not found')
            form = TaskResourceAllocationForm(request.POST,task_choice=task_records,resource_choice=resource_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['taskresourceallocation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/taskresourceallocation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "taskresourceallocation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'taskresourceallocation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskresourceallocation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete taskresourceallocation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "taskresourceallocation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/taskresourceallocation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def taskschedule_create(request):
    # try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
        form=TaskScheduleForm(task_choice=task_records)
        MSID= get_service_plan('view taskschedule')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = TaskScheduleForm(request.POST,task_choice=task_records)
            if form.is_valid():
                MSID= get_service_plan('create taskschedule')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['scheduled_start_date'] = cleaned_data['scheduled_start_date'].strftime('%Y-%m-%d')
                cleaned_data['scheduled_end_date'] = cleaned_data['scheduled_end_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/taskschedule')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'taskschedule.html',context)
    # except Exception as error:
    #     return render(request, "error.html", {"error": error})    

def taskschedule_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view taskschedule')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "taskschedule_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TaskScheduleForm(initial=master_view)    
        MSID= get_service_plan('view taskschedule')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "taskschedule_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'taskschedule_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskschedule_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view taskschedule')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "taskschedule_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TaskScheduleForm(initial=master_type_edit,task_choice=task_records)

        MSID= get_service_plan('view taskschedule')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update taskschedule')
            if MSID is None:
                print('MISID not found')
            form = TaskScheduleForm(request.POST,task_choice=task_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['taskschedule_id'] = pk    
                cleaned_data['scheduled_start_date'] = cleaned_data['scheduled_start_date'].strftime('%Y-%m-%d')
                cleaned_data['scheduled_end_date'] = cleaned_data['scheduled_end_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/taskschedule')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "taskschedule_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'taskschedule_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskschedule_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete taskschedule')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "taskschedule_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/taskschedule')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def taskstatus_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view task')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     task_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=TaskStatusForm(task_choice=task_records)
        # MSID= get_service_plan('view taskstatus')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = TaskStatusForm()
        # if request.method == "POST":
        #     form = TaskStatusForm(request.POST,task_choice=task_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create taskstatus')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
        #         cleaned_data['update_date'] = cleaned_data['update_date'].strftime('%Y-%m-%d')
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/taskstatus')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'taskstatus.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskstatus_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view taskstatus')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "taskstatus_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TaskStatusForm(initial=master_view)    
        MSID= get_service_plan('view taskstatus')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "taskstatus_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'taskstatus_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskstatus_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view taskstatus')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "taskstatus_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TaskStatusForm(initial=master_type_edit,task_choice=task_records)

        MSID= get_service_plan('view taskstatus')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update taskstatus')
            if MSID is None:
                print('MISID not found')
            form = TaskStatusForm(request.POST,task_choice=task_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['taskstatus_id'] = pk    
                cleaned_data['update_date'] = cleaned_data['update_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/taskstatus')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "taskstatus_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'taskstatus_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def taskstatus_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete taskstatus')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "taskstatus_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/taskstatus')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def timesheet_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            worker_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
        form=TimesheetForm(worker_choice=worker_records,project_choice=project_records,task_choice=task_records)
        MSID= get_service_plan('view timesheet')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = TimesheetForm(request.POST,worker_choice=worker_records,project_choice=project_records,task_choice=task_records)
            if form.is_valid():
                MSID= get_service_plan('create timesheet')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/timesheet')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'timesheet.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def timesheet_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view timesheet')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "timesheet_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TimesheetForm(initial=master_view)    
        MSID= get_service_plan('view timesheet')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "timesheet_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'timesheet_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def timesheet_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            worker_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view timesheet')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "timesheet_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TimesheetForm(initial=master_type_edit,worker_choice=worker_records,project_choice=project_records,task_choice=task_records)

        MSID= get_service_plan('view timesheet')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update timesheet')
            if MSID is None:
                print('MISID not found')
            form = TimesheetForm(request.POST,worker_choice=worker_records,project_choice=project_records,task_choice=task_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['timesheet_id'] = pk    
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/timesheet')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "timesheet_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'timesheet_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def timesheet_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete timesheet')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "timesheet_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/timesheet')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def timetracking_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view task')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     task_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view user')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     user_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=TimeTrackingForm(task_choice=task_records,user_choice=user_records)
        # MSID= get_service_plan('view timetracking')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = TimeTrackingForm()
        # if request.method == "POST":
        #     form = TimeTrackingForm(request.POST,task_choice=task_records,user_choice=user_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create timetracking')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
        #         cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/timetracking')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,"timetracking":"active"
            # 'records':master_view,"save":True
        }
        return render(request, 'timetracking.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def timetracking_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view timetracking')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "timetracking_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TimeTrackingForm(initial=master_view)    
        MSID= get_service_plan('view timetracking')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "timetracking_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'timetracking_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def timetracking_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            user_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view timetracking')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "timetracking_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TimeTrackingForm(initial=master_type_edit,task_choice=task_records,user_choice=user_records)

        MSID= get_service_plan('view timetracking')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update timetracking')
            if MSID is None:
                print('MISID not found')
            form = TimeTrackingForm(request.POST,task_choice=task_records,user_choice=user_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['timetracking_id'] = pk    
                cleaned_data['date'] = cleaned_data['date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/timetracking')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "timetracking_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'timetracking_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def timetracking_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete timetracking')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "timetracking_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/timetracking')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def stockadjustment_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view material')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            material_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=StockAdjustmentForm(material_choice=material_records,project_choice=project_records)
        MSID= get_service_plan('view stockadjustment')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = StockAdjustmentForm(request.POST,material_choice=material_records,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create stockadjustment')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['adjustment_date'] = cleaned_data['adjustment_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/stockadjustment')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'stockadjustment.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stockadjustment_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view stockadjustment')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "stockadjustment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = StockAdjustmentForm(initial=master_view)    
        MSID= get_service_plan('view stockadjustment')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "stockadjustment_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'stockadjustment_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stockadjustment_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view material')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            material_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view stockadjustment')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "stockadjustment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = StockAdjustmentForm(initial=master_type_edit,material_choice=material_records,project_choice=project_records)

        MSID= get_service_plan('view stockadjustment')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update stockadjustment')
            if MSID is None:
                print('MISID not found')
            form = StockAdjustmentForm(request.POST,material_choice=material_records,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['stockadjustment_id'] = pk    
                cleaned_data['adjustment_date'] = cleaned_data['adjustment_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/stockadjustment')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "stockadjustment_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'stockadjustment_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stockadjustment_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete stockadjustment')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "stockadjustment_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/stockadjustment')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def stockreplenishmentrequest_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view material')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            material_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=StockReplenishmentRequestForm(material_choice=material_records,project_choice=project_records)
        MSID= get_service_plan('view stockreplenishmentrequest')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = StockReplenishmentRequestForm(request.POST,material_choice=material_records,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create stockreplenishmentrequest')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['request_date'] = cleaned_data['request_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/stockreplenishmentrequest')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'stockreplenishmentrequest.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stockreplenishmentrequest_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view stockreplenishmentrequest')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "stockreplenishmentrequest_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = StockReplenishmentRequestForm(initial=master_view)    
        MSID= get_service_plan('view stockreplenishmentrequest')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "stockreplenishmentrequest_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'stockreplenishmentrequest_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stockreplenishmentrequest_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view material')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            material_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view stockreplenishmentrequest')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "stockreplenishmentrequest_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = StockReplenishmentRequestForm(initial=master_type_edit,material_choice=material_records,project_choice=project_records)

        MSID= get_service_plan('view stockreplenishmentrequest')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update stockreplenishmentrequest')
            if MSID is None:
                print('MISID not found')
            form = StockReplenishmentRequestForm(request.POST,material_choice=material_records,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['stockreplenishmentrequest_id'] = pk    
                cleaned_data['request_date'] = cleaned_data['request_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/stockreplenishmentrequest')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "stockreplenishmentrequest_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'stockreplenishmentrequest_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stockreplenishmentrequest_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete stockreplenishmentrequest')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "stockreplenishmentrequest_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/stockreplenishmentrequest')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def mitigationaction_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view mitigationstrategy')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            mitigation_strategy_records = response['data']
        else:
            print('Data not found in response')
        form=MitigationActionForm(mitigation_strategy_choice=mitigation_strategy_records)
        MSID= get_service_plan('view mitigationaction')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = MitigationActionForm(request.POST,mitigation_strategy_choice=mitigation_strategy_records)
            if form.is_valid():
                MSID= get_service_plan('create mitigationaction')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['due_date'] = cleaned_data['due_date'].strftime('%Y-%m-%d')
                cleaned_data['completed_date'] = cleaned_data['completed_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/mitigationaction')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'mitigationaction.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def mitigationaction_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view mitigationaction')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "mitigationaction_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = MitigationActionForm(initial=master_view)    
        MSID= get_service_plan('view mitigationaction')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "mitigationaction_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'mitigationaction_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def mitigationaction_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view mitigationstrategy')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            mitigation_strategy_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view mitigationaction')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "mitigationaction_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = MitigationActionForm(initial=master_type_edit,mitigation_strategy_choice=mitigation_strategy_records)

        MSID= get_service_plan('view mitigationaction')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update mitigationaction')
            if MSID is None:
                print('MISID not found')
            form = MitigationActionForm(request.POST,mitigation_strategy_choice=mitigation_strategy_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['mitigationaction_id'] = pk    
                cleaned_data['due_date'] = cleaned_data['due_date'].strftime('%Y-%m-%d')
                cleaned_data['completed_date'] = cleaned_data['completed_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/mitigationaction')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "mitigationaction_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'mitigationaction_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def mitigationaction_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete mitigationaction')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "mitigationaction_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/mitigationaction')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def tenderscope_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view tenderdocument')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            tender_records = response['data']
        else:
            print('Data not found in response')
        form=TenderScopeForm(tender_choice=tender_records)
        MSID= get_service_plan('view tenderscope')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = TenderScopeForm(request.POST,tender_choice=tender_records)
            if form.is_valid():
                MSID= get_service_plan('create tenderscope')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['delivery_timeline'] = cleaned_data['delivery_timeline'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/tenderscope')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'tenderscope.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def tenderscope_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view tenderscope')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "tenderscope_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TenderScopeForm(initial=master_view)    
        MSID= get_service_plan('view tenderscope')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "tenderscope_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'tenderscope_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def tenderscope_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view tenderdocument')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            tender_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view tenderscope')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "tenderscope_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TenderScopeForm(initial=master_type_edit,tender_choice=tender_records)

        MSID= get_service_plan('view tenderscope')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update tenderscope')
            if MSID is None:
                print('MISID not found')
            form = TenderScopeForm(request.POST,tender_choice=tender_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['tenderscope_id'] = pk    
                cleaned_data['delivery_timeline'] = cleaned_data['delivery_timeline'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/tenderscope')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "tenderscope_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'tenderscope_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def tenderscope_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete tenderscope')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "tenderscope_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/tenderscope')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def tendersubmission_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view tenderdocument')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            tender_records = response['data']
        else:
            print('Data not found in response')
        form=TenderSubmissionForm(tender_choice=tender_records)
        MSID= get_service_plan('view tendersubmission')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = TenderSubmissionForm(request.POST,tender_choice=tender_records)
            if form.is_valid():
                MSID= get_service_plan('create tendersubmission')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['submitted_on'] = cleaned_data['submitted_on'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/tendersubmission')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'tendersubmission.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def tendersubmission_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view tendersubmission')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "tendersubmission_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TenderSubmissionForm(initial=master_view)    
        MSID= get_service_plan('view tendersubmission')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "tendersubmission_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'tendersubmission_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def tendersubmission_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view tenderdocument')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            tender_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view tendersubmission')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "tendersubmission_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TenderSubmissionForm(initial=master_type_edit,tender_choice=tender_records)

        MSID= get_service_plan('view tendersubmission')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update tendersubmission')
            if MSID is None:
                print('MISID not found')
            form = TenderSubmissionForm(request.POST,tender_choice=tender_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['tendersubmission_id'] = pk    
                cleaned_data['submitted_on'] = cleaned_data['submitted_on'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/tendersubmission')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "tendersubmission_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'tendersubmission_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def tendersubmission_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete tendersubmission')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "tendersubmission_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/tendersubmission')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def contractaward_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view none')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     contract_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view finalvendorselection')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     selected_vendor_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=ContractAwardForm(contract_choice=contract_records,selected_vendor_choice=selected_vendor_records)
        # MSID= get_service_plan('view contractaward')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = ContractAwardForm()
        # if request.method == "POST":
        #     form = ContractAwardForm(request.POST,contract_choice=contract_records,selected_vendor_choice=selected_vendor_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create contractaward')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
        #         cleaned_data['award_date'] = cleaned_data['award_date'].strftime('%Y-%m-%d')
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/contractaward')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'contractaward.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractaward_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view contractaward')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "contractaward_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ContractAwardForm(initial=master_view)    
        MSID= get_service_plan('view contractaward')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "contractaward_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'contractaward_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractaward_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view none')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            contract_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view finalvendorselection')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            selected_vendor_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view contractaward')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "contractaward_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ContractAwardForm(initial=master_type_edit,contract_choice=contract_records,selected_vendor_choice=selected_vendor_records)

        MSID= get_service_plan('view contractaward')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update contractaward')
            if MSID is None:
                print('MISID not found')
            form = ContractAwardForm(request.POST,contract_choice=contract_records,selected_vendor_choice=selected_vendor_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['contractaward_id'] = pk    
                cleaned_data['award_date'] = cleaned_data['award_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/contractaward')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "contractaward_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'contractaward_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def contractaward_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete contractaward')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "contractaward_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/contractaward')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def stakeholderevaluation_create(request):
    try:
        # token = request.session['user_token']
       
        # MSID = get_service_plan('view proposalevaluation')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     evaluation_records = response['data']
        # else:
        #     print('Data not found in response')
       
        # MSID = get_service_plan('view stakeholder')
        # if MSID is None:
        #     print('MSID not found')

        # data = {
        #     'ms_id': MSID,
        #     'ms_payload': {}
        # }

        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # # Check if the response contains data
        # if 'data' in response:
        #     stakeholder_records = response['data']
        # else:
        #     print('Data not found in response')
        # form=StakeholderEvaluationForm(evaluation_choice=evaluation_records,stakeholder_choice=stakeholder_records)
        # MSID= get_service_plan('view stakeholderevaluation')
        # if MSID is None:
        #     print('MISID not found')
   
        # data={
        #     'ms_id':MSID,
        #     'ms_payload':{}
        # }
        # json_data = json.dumps(data)
        # response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        # master_view = response['data']
        form = StakeholderEvaluationForm()
        # if request.method == "POST":
        #     form = StakeholderEvaluationForm(request.POST,evaluation_choice=evaluation_records,stakeholder_choice=stakeholder_records)
        #     if form.is_valid():
        #         MSID= get_service_plan('create stakeholderevaluation')
        #         if MSID is None:
        #             print('MISID not found')      
        #         cleaned_data = form.cleaned_data
                     
        #         data={
        #             'ms_id':MSID,
        #             'ms_payload':cleaned_data
        #         } 
        #         json_data = json.dumps(data)
        #         response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        #         print('response',response)
        #         if response['status_code'] ==  0:                  
        #             messages.info(request, "Well Done..! Application Submitted..")
        #             return redirect('/stakeholderevaluation')
        #         else:
        #             messages.info(request, "Oops..! Application Failed to Submitted..")
        #     else:
        #         print('errorss',form.errors) 
        
        context={      
            'form':form,
            # 'records':master_view,"save":True
        }
        return render(request, 'stakeholderevaluation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stakeholderevaluation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view stakeholderevaluation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "stakeholderevaluation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = StakeholderEvaluationForm(initial=master_view)    
        MSID= get_service_plan('view stakeholderevaluation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "stakeholderevaluation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'stakeholderevaluation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stakeholderevaluation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view proposalevaluation')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            evaluation_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view stakeholder')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            stakeholder_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view stakeholderevaluation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "stakeholderevaluation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = StakeholderEvaluationForm(initial=master_type_edit,evaluation_choice=evaluation_records,stakeholder_choice=stakeholder_records)

        MSID= get_service_plan('view stakeholderevaluation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update stakeholderevaluation')
            if MSID is None:
                print('MISID not found')
            form = StakeholderEvaluationForm(request.POST,evaluation_choice=evaluation_records,stakeholder_choice=stakeholder_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['stakeholderevaluation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/stakeholderevaluation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "stakeholderevaluation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'stakeholderevaluation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def stakeholderevaluation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete stakeholderevaluation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "stakeholderevaluation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/stakeholderevaluation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def payment_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view invoice')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            invoice_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        form=PaymentForm(invoice_choice=invoice_records,project_choice=project_records)
        MSID= get_service_plan('view payment')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = PaymentForm(request.POST,invoice_choice=invoice_records,project_choice=project_records)
            if form.is_valid():
                MSID= get_service_plan('create payment')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['payment_date'] = cleaned_data['payment_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/payment')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'payment.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def payment_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view payment')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "payment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = PaymentForm(initial=master_view)    
        MSID= get_service_plan('view payment')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "payment_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'payment_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def payment_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view invoice')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            invoice_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view project')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            project_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view payment')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "payment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = PaymentForm(initial=master_type_edit,invoice_choice=invoice_records,project_choice=project_records)

        MSID= get_service_plan('view payment')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update payment')
            if MSID is None:
                print('MISID not found')
            form = PaymentForm(request.POST,invoice_choice=invoice_records,project_choice=project_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['payment_id'] = pk    
                cleaned_data['payment_date'] = cleaned_data['payment_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/payment')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "payment_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'payment_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def payment_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete payment')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "payment_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/payment')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def criticalpathmonitoring_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view criticalpath')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            critical_path_records = response['data']
        else:
            print('Data not found in response')
        form=CriticalPathMonitoringForm(critical_path_choice=critical_path_records)
        MSID= get_service_plan('view criticalpathmonitoring')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = CriticalPathMonitoringForm(request.POST,critical_path_choice=critical_path_records)
            if form.is_valid():
                MSID= get_service_plan('create criticalpathmonitoring')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['actual_start_date'] = cleaned_data['actual_start_date'].strftime('%Y-%m-%d')
                cleaned_data['actual_end_date'] = cleaned_data['actual_end_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/criticalpathmonitoring')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'criticalpathmonitoring.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def criticalpathmonitoring_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view criticalpathmonitoring')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "criticalpathmonitoring_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = CriticalPathMonitoringForm(initial=master_view)    
        MSID= get_service_plan('view criticalpathmonitoring')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "criticalpathmonitoring_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'criticalpathmonitoring_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def criticalpathmonitoring_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view criticalpath')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            critical_path_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view criticalpathmonitoring')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "criticalpathmonitoring_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = CriticalPathMonitoringForm(initial=master_type_edit,critical_path_choice=critical_path_records)

        MSID= get_service_plan('view criticalpathmonitoring')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update criticalpathmonitoring')
            if MSID is None:
                print('MISID not found')
            form = CriticalPathMonitoringForm(request.POST,critical_path_choice=critical_path_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['criticalpathmonitoring_id'] = pk    
                cleaned_data['actual_start_date'] = cleaned_data['actual_start_date'].strftime('%Y-%m-%d')
                cleaned_data['actual_end_date'] = cleaned_data['actual_end_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/criticalpathmonitoring')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "criticalpathmonitoring_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'criticalpathmonitoring_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def criticalpathmonitoring_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete criticalpathmonitoring')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "criticalpathmonitoring_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/criticalpathmonitoring')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def adjustment_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view delay')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            delay_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            adjusted_task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            adjusted_by_records = response['data']
        else:
            print('Data not found in response')
        form=AdjustmentForm(delay_choice=delay_records,adjusted_task_choice=adjusted_task_records,adjusted_by_choice=adjusted_by_records)
        MSID= get_service_plan('view adjustment')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = AdjustmentForm(request.POST,delay_choice=delay_records,adjusted_task_choice=adjusted_task_records,adjusted_by_choice=adjusted_by_records)
            if form.is_valid():
                MSID= get_service_plan('create adjustment')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['new_start_date'] = cleaned_data['new_start_date'].strftime('%Y-%m-%d')
                cleaned_data['new_end_date'] = cleaned_data['new_end_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/adjustment')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'adjustment.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def adjustment_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view adjustment')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "adjustment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = AdjustmentForm(initial=master_view)    
        MSID= get_service_plan('view adjustment')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "adjustment_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'adjustment_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def adjustment_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view delay')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            delay_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            adjusted_task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            adjusted_by_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view adjustment')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "adjustment_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = AdjustmentForm(initial=master_type_edit,delay_choice=delay_records,adjusted_task_choice=adjusted_task_records,adjusted_by_choice=adjusted_by_records)

        MSID= get_service_plan('view adjustment')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update adjustment')
            if MSID is None:
                print('MISID not found')
            form = AdjustmentForm(request.POST,delay_choice=delay_records,adjusted_task_choice=adjusted_task_records,adjusted_by_choice=adjusted_by_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['adjustment_id'] = pk    
                cleaned_data['new_start_date'] = cleaned_data['new_start_date'].strftime('%Y-%m-%d')
                cleaned_data['new_end_date'] = cleaned_data['new_end_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/adjustment')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "adjustment_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'adjustment_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def adjustment_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete adjustment')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "adjustment_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/adjustment')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def resourcereallocation_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view resourceallocation')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            original_allocation_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            new_task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            reallocated_by_records = response['data']
        else:
            print('Data not found in response')
        form=ResourceReallocationForm(original_allocation_choice=original_allocation_records,new_task_choice=new_task_records,reallocated_by_choice=reallocated_by_records)
        MSID= get_service_plan('view resourcereallocation')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ResourceReallocationForm(request.POST,original_allocation_choice=original_allocation_records,new_task_choice=new_task_records,reallocated_by_choice=reallocated_by_records)
            if form.is_valid():
                MSID= get_service_plan('create resourcereallocation')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourcereallocation')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'resourcereallocation.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourcereallocation_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view resourcereallocation')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "resourcereallocation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ResourceReallocationForm(initial=master_view)    
        MSID= get_service_plan('view resourcereallocation')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "resourcereallocation_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'resourcereallocation_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourcereallocation_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view resourceallocation')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            original_allocation_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view task')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            new_task_records = response['data']
        else:
            print('Data not found in response')
       
        MSID = get_service_plan('view user')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            reallocated_by_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view resourcereallocation')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "resourcereallocation_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ResourceReallocationForm(initial=master_type_edit,original_allocation_choice=original_allocation_records,new_task_choice=new_task_records,reallocated_by_choice=reallocated_by_records)

        MSID= get_service_plan('view resourcereallocation')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update resourcereallocation')
            if MSID is None:
                print('MISID not found')
            form = ResourceReallocationForm(request.POST,original_allocation_choice=original_allocation_records,new_task_choice=new_task_records,reallocated_by_choice=reallocated_by_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['resourcereallocation_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourcereallocation')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "resourcereallocation_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'resourcereallocation_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourcereallocation_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete resourcereallocation')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "resourcereallocation_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/resourcereallocation')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def resourceusage_create(request):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view taskresourceallocation')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_resource_allocation_records = response['data']
        else:
            print('Data not found in response')
        form=ResourceUsageForm(task_resource_allocation_choice=task_resource_allocation_records)
        MSID= get_service_plan('view resourceusage')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ResourceUsageForm(request.POST,task_resource_allocation_choice=task_resource_allocation_records)
            if form.is_valid():
                MSID= get_service_plan('create resourceusage')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['start_time'] = cleaned_data['start_time'].strftime('%Y-%m-%d %H:%M:%S')
                cleaned_data['end_time'] = cleaned_data['end_time'].strftime('%Y-%m-%d %H:%M:%S')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourceusage')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'resourceusage.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceusage_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view resourceusage')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "resourceusage_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ResourceUsageForm(initial=master_view)    
        MSID= get_service_plan('view resourceusage')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "resourceusage_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'resourceusage_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceusage_edit(request,pk):
    try:
        token = request.session['user_token']
       
        MSID = get_service_plan('view taskresourceallocation')
        if MSID is None:
            print('MSID not found')

        data = {
            'ms_id': MSID,
            'ms_payload': {}
        }

        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL, ENDPOINT, json_data, token)

        # Check if the response contains data
        if 'data' in response:
            task_resource_allocation_records = response['data']
        else:
            print('Data not found in response')
        MSID= get_service_plan('view resourceusage')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "resourceusage_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ResourceUsageForm(initial=master_type_edit,task_resource_allocation_choice=task_resource_allocation_records)

        MSID= get_service_plan('view resourceusage')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update resourceusage')
            if MSID is None:
                print('MISID not found')
            form = ResourceUsageForm(request.POST,task_resource_allocation_choice=task_resource_allocation_records)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['resourceusage_id'] = pk    
                cleaned_data['start_time'] = cleaned_data['start_time'].strftime('%Y-%m-%d %H:%M:%S')
                cleaned_data['end_time'] = cleaned_data['end_time'].strftime('%Y-%m-%d %H:%M:%S')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/resourceusage')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "resourceusage_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'resourceusage_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def resourceusage_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete resourceusage')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "resourceusage_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/resourceusage')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def client_create(request):
    try:
        token = request.session['user_token']
        form=ClientForm()
        MSID= get_service_plan('view client')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = ClientForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create client')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/client')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'client.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def client_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view client')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "client_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = ClientForm(initial=master_view)    
        MSID= get_service_plan('view client')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "client_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'client_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def client_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view client')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "client_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = ClientForm(initial=master_type_edit,)

        MSID= get_service_plan('view client')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update client')
            if MSID is None:
                print('MISID not found')
            form = ClientForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['client_id'] = pk    
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/client')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "client_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'client_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def client_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete client')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "client_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/client')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def bidqualification_create(request):
    try:
        token = request.session['user_token']
        form=BidQualificationForm()
        MSID= get_service_plan('view bidqualification')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = BidQualificationForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create bidqualification')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['response_due_date'] = cleaned_data['response_due_date'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/bidqualification')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'bidqualification.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bidqualification_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view bidqualification')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "bidqualification_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = BidQualificationForm(initial=master_view)    
        MSID= get_service_plan('view bidqualification')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "bidqualification_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'bidqualification_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bidqualification_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view bidqualification')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "bidqualification_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = BidQualificationForm(initial=master_type_edit,)

        MSID= get_service_plan('view bidqualification')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update bidqualification')
            if MSID is None:
                print('MISID not found')
            form = BidQualificationForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['bidqualification_id'] = pk    
                cleaned_data['response_due_date'] = cleaned_data['response_due_date'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/bidqualification')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "bidqualification_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'bidqualification_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def bidqualification_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete bidqualification')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "bidqualification_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/bidqualification')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
       
def tenderproposalmanagement_create(request):
    try:
        token = request.session['user_token']
        form=TenderProposalManagementForm()
        MSID= get_service_plan('view tenderproposalmanagement')
        if MSID is None:
            print('MISID not found')
   
        data={
            'ms_id':MSID,
            'ms_payload':{}
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        if request.method == "POST":
            form = TenderProposalManagementForm(request.POST,)
            if form.is_valid():
                MSID= get_service_plan('create tenderproposalmanagement')
                if MSID is None:
                    print('MISID not found')      
                cleaned_data = form.cleaned_data
                cleaned_data['issued_date'] = cleaned_data['issued_date'].strftime('%Y-%m-%d')
                cleaned_data['response_deadline'] = cleaned_data['response_deadline'].strftime('%Y-%m-%d')
                     
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                } 
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                print('response',response)
                if response['status_code'] ==  0:                  
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/tenderproposalmanagement')
                else:
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 
        
        context={      
            'form':form,'records':master_view,"save":True
        }
        return render(request, 'tenderproposalmanagement.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def tenderproposalmanagement_view(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view tenderproposalmanagement')
        if MSID is None:
                print('MISID not found')
        payload_form = {
            "tenderproposalmanagement_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data'][0]
        form = TenderProposalManagementForm(initial=master_view)    
        MSID= get_service_plan('view tenderproposalmanagement')
        if MSID is None:
            print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']

        context={   
            "tenderproposalmanagement_view_active":"active",
            "form":form,
            "records":master_view,
            "View":True
        }
        return render(request, 'tenderproposalmanagement_view.html',context)
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def tenderproposalmanagement_edit(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('view tenderproposalmanagement')
        if MSID is None:
            print('MISID not found')
        payload_form = {
            "tenderproposalmanagement_id":pk
        }    
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        print('data',response['data'])
        master_type_edit = response['data'][0]
        
        form = TenderProposalManagementForm(initial=master_type_edit,)

        MSID= get_service_plan('view tenderproposalmanagement')
        if MSID is None:
                print('MISID not found')
        payload_form = {       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        master_view = response['data']
        print('master_view',master_view)

        if request.method == 'POST':
            MSID= get_service_plan('update tenderproposalmanagement')
            if MSID is None:
                print('MISID not found')
            form = TenderProposalManagementForm(request.POST,)
            if form.is_valid():
                cleaned_data = form.cleaned_data          
                cleaned_data['tenderproposalmanagement_id'] = pk    
                cleaned_data['issued_date'] = cleaned_data['issued_date'].strftime('%Y-%m-%d')
                cleaned_data['response_deadline'] = cleaned_data['response_deadline'].strftime('%Y-%m-%d')
                   
                data={
                    'ms_id':MSID,
                    'ms_payload':cleaned_data
                }
                json_data = json.dumps(data)
                response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
                if response['status_code'] == 0:
                    messages.info(request, "Well Done..! Application Submitted..")
                    return redirect('/tenderproposalmanagement')
                else:
                    # return JsonResponse({'error': 'Failed to save form data'}, status=400)
                    messages.info(request, "Oops..! Application Failed to Submitted..")
            else:
                print('errorss',form.errors) 

        context={   
            "tenderproposalmanagement_view_active":"active",
            "form":form,
            "edit":True,
            "records":master_view
        }
        return render(request, 'tenderproposalmanagement_edit.html',context)   
    except Exception as error:
        return render(request, "error.html", {"error": error})    

def tenderproposalmanagement_delete(request,pk):
    try:
        token = request.session['user_token']
        MSID= get_service_plan('delete tenderproposalmanagement')
        if MSID is None:
            print('MISID not found') 
        payload_form = {
            "tenderproposalmanagement_id":pk       
        }
        data={
            'ms_id':MSID,
            'ms_payload':payload_form
        }
        json_data = json.dumps(data)
        response = call_post_method_with_token_v2(BASEURL,ENDPOINT,json_data,token)
        if response['status_code'] == 0:
            
            messages.info(request, "Well Done..! Application Submitted..")
            return redirect('/tenderproposalmanagement')
        else:
            messages.info(request, "Oops..! Application Failed to Submitted..")
    except Exception as error:
        return render(request, "error.html", {"error": error}) 
    
    
def master_base(request):
    try:
        context={   
            "tenderproposalmanagement_view_active":"active",
           
        }
        return render(request, 'base_copy.html',context)   
   
    except Exception as error:
        return render(request, "error.html", {"error": error})     
       